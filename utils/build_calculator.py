"""–†–∞—Å—á–µ—Ç —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ —Å–±–æ—Ä–æ–∫ –æ—Ä—É–∂–∏—è."""
from typing import List, Dict, Optional
from dataclasses import dataclass


@dataclass
class BuildStats:
    """–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Å–±–æ—Ä–∫–∏."""
    ergonomics: float
    vertical_recoil: float
    horizontal_recoil: float
    weight: float
    accuracy: float
    effective_distance: int
    fire_rate: int
    moa: float
    
    @property
    def recoil_sum(self) -> float:
        """–û–±—â–∞—è –æ—Ç–¥–∞—á–∞."""
        return self.vertical_recoil + self.horizontal_recoil


class BuildCalculator:
    """–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ —Å–±–æ—Ä–æ–∫."""
    
    def __init__(self, weapon_data: Dict, modules_data: List[Dict]):
        """
        Args:
            weapon_data: –î–∞–Ω–Ω—ã–µ –±–∞–∑–æ–≤–æ–≥–æ –æ—Ä—É–∂–∏—è –∏–∑ API
            modules_data: –°–ø–∏—Å–æ–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –º–æ–¥—É–ª–µ–π –∏–∑ API
        """
        self.weapon = weapon_data
        self.modules = modules_data
    
    def calculate_stats(self) -> BuildStats:
        """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –≤—Å–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Å–±–æ—Ä–∫–∏."""
        # –ë–∞–∑–æ–≤—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –æ—Ä—É–∂–∏—è
        base_props = self.weapon.get("properties", {})
        
        ergonomics = base_props.get("ergonomics", 0)
        vertical_recoil = base_props.get("recoilVertical", 100)
        horizontal_recoil = base_props.get("recoilHorizontal", 100)
        weight = base_props.get("weight", 0) / 1000  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –∫–≥
        accuracy = 100.0
        fire_rate = base_props.get("fireRate", 0)
        moa = base_props.get("centerOfImpact", 0)
        effective_distance = base_props.get("effectiveDistance", 0)
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –æ—Ç –º–æ–¥—É–ª–µ–π
        for module in self.modules:
            mod_props = module.get("properties", {})
            
            # –≠—Ä–≥–æ–Ω–æ–º–∏–∫–∞
            ergo_modifier = mod_props.get("ergonomics", 0)
            ergonomics += ergo_modifier
            
            # –û—Ç–¥–∞—á–∞
            recoil_modifier = mod_props.get("recoilModifier", 0)
            if recoil_modifier != 0:
                # –ü—Ä–æ—Ü–µ–Ω—Ç–Ω—ã–π –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä
                vertical_recoil *= (1 + recoil_modifier / 100)
                horizontal_recoil *= (1 + recoil_modifier / 100)
            
            # –í–µ—Å
            module_weight = mod_props.get("weight", 0) / 1000
            weight += module_weight
            
            # –¢–æ—á–Ω–æ—Å—Ç—å
            accuracy_modifier = mod_props.get("accuracy", 0)
            accuracy += accuracy_modifier
        
        return BuildStats(
            ergonomics=round(ergonomics, 1),
            vertical_recoil=round(vertical_recoil, 0),
            horizontal_recoil=round(horizontal_recoil, 0),
            weight=round(weight, 2),
            accuracy=round(accuracy, 1),
            effective_distance=effective_distance,
            fire_rate=fire_rate,
            moa=round(moa, 2)
        )
    
    def get_tier_rating(self) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å tier —Ä–µ–π—Ç–∏–Ω–≥ —Å–±–æ—Ä–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫."""
        stats = self.calculate_stats()
        
        # –õ–æ–≥–∏–∫–∞ –æ—Ü–µ–Ω–∫–∏ (–º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å)
        score = 0
        
        # –≠—Ä–≥–æ–Ω–æ–º–∏–∫–∞ (0-100)
        if stats.ergonomics >= 70:
            score += 3
        elif stats.ergonomics >= 50:
            score += 2
        elif stats.ergonomics >= 30:
            score += 1
        
        # –û—Ç–¥–∞—á–∞ (—á–µ–º –º–µ–Ω—å—à–µ, —Ç–µ–º –ª—É—á—à–µ)
        if stats.recoil_sum <= 60:
            score += 3
        elif stats.recoil_sum <= 100:
            score += 2
        elif stats.recoil_sum <= 150:
            score += 1
        
        # –í–µ—Å (—á–µ–º –ª–µ–≥—á–µ, —Ç–µ–º –ª—É—á—à–µ –¥–ª—è —ç—Ä–≥–æ–Ω–æ–º–∏–∫–∏)
        if stats.weight <= 3.5:
            score += 1
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º tier
        if score >= 6:
            return "S"
        elif score >= 4:
            return "A"
        elif score >= 2:
            return "B"
        elif score >= 1:
            return "C"
        else:
            return "D"
    
    def format_stats_text(self, language: str = "ru") -> str:
        """–û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –¥–ª—è –≤—ã–≤–æ–¥–∞."""
        stats = self.calculate_stats()
        tier = self.get_tier_rating()
        
        if language == "ru":
            text = f"""
üìä **–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Å–±–æ—Ä–∫–∏** (Tier: {tier})

üéØ **–≠—Ä–≥–æ–Ω–æ–º–∏–∫–∞:** {stats.ergonomics}
üìâ **–í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è –æ—Ç–¥–∞—á–∞:** {stats.vertical_recoil}
üìâ **–ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –æ—Ç–¥–∞—á–∞:** {stats.horizontal_recoil}
üî¢ **–°—É–º–º–∞ –æ—Ç–¥–∞—á–∏:** {stats.recoil_sum}
‚öñÔ∏è **–í–µ—Å:** {stats.weight} –∫–≥
üéØ **–¢–æ—á–Ω–æ—Å—Ç—å:** {stats.accuracy}%
üìè **MOA:** {stats.moa}
üî´ **–°–∫–æ—Ä–æ—Å—Ç—Ä–µ–ª—å–Ω–æ—Å—Ç—å:** {stats.fire_rate} –≤/–º–∏–Ω
üìç **–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞—è –¥–∏—Å—Ç–∞–Ω—Ü–∏—è:** {stats.effective_distance}–º
"""
        else:
            text = f"""
üìä **Build Stats** (Tier: {tier})

üéØ **Ergonomics:** {stats.ergonomics}
üìâ **Vertical Recoil:** {stats.vertical_recoil}
üìâ **Horizontal Recoil:** {stats.horizontal_recoil}
üî¢ **Recoil Sum:** {stats.recoil_sum}
‚öñÔ∏è **Weight:** {stats.weight} kg
üéØ **Accuracy:** {stats.accuracy}%
üìè **MOA:** {stats.moa}
üî´ **Fire Rate:** {stats.fire_rate} RPM
üìç **Effective Distance:** {stats.effective_distance}m
"""
        return text.strip()


async def calculate_build_from_api(weapon_id: str, module_ids: List[str], tarkov_api) -> Optional[BuildStats]:
    """
    –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Å–±–æ—Ä–∫–∏ –∏—Å–ø–æ–ª—å–∑—É—è –¥–∞–Ω–Ω—ã–µ –∏–∑ API.
    
    Args:
        weapon_id: ID –æ—Ä—É–∂–∏—è –∏–∑ tarkov.dev
        module_ids: –°–ø–∏—Å–æ–∫ ID –º–æ–¥—É–ª–µ–π
        tarkov_api: –≠–∫–∑–µ–º–ø–ª—è—Ä TarkovAPI
    
    Returns:
        BuildStats –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
    """
    # –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ—Ä—É–∂–∏—è
    weapon_data = await tarkov_api.get_item_by_id(weapon_id)
    if not weapon_data:
        return None
    
    # –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –º–æ–¥—É–ª–µ–π
    modules_data = []
    for module_id in module_ids:
        module = await tarkov_api.get_item_by_id(module_id)
        if module:
            modules_data.append(module)
    
    # –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
    calculator = BuildCalculator(weapon_data, modules_data)
    return calculator.calculate_stats()
