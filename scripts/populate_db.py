"""Script to populate the database with sample data for testing."""
import asyncio
import aiosqlite
import json
import sys
import os

# Add parent directory to path
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from database import Database, WeaponCategory, BuildCategory, TierRating


async def populate_sample_data(db: Database):
    """Populate database with sample EFT data."""
    
    async with aiosqlite.connect(db.db_path) as conn:
        # Clear existing data (except users)
        print("   üóëÔ∏è  –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
        await conn.execute("DELETE FROM builds")
        await conn.execute("DELETE FROM modules")
        await conn.execute("DELETE FROM weapons")
        await conn.execute("DELETE FROM traders")
        await conn.execute("DELETE FROM quests")
        await conn.commit()
        
        # Add traders
        print("   üë• –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤—Ü–µ–≤...")
        traders = [
            ("Prapor", "üî´"),
            ("Therapist", "üíä"),
            ("Fence", "üóëÔ∏è"),
            ("Skier", "üíº"),
            ("Peacekeeper", "ü§ù"),
            ("Mechanic", "üîß"),
            ("Ragman", "üëï"),
            ("Jaeger", "üå≤")
        ]
        
        for trader_name, emoji in traders:
            await conn.execute(
                "INSERT OR IGNORE INTO traders (name, emoji) VALUES (?, ?)",
                (trader_name, emoji)
            )
        await conn.commit()
        
        # Add weapons
        print("   üî´ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ä—É–∂–∏—è...")
        weapons = [
            ("AK-74N", "AK-74N", WeaponCategory.ASSAULT_RIFLE.value, TierRating.A_TIER.value, 35000),
            ("AK-74M", "AK-74M", WeaponCategory.ASSAULT_RIFLE.value, TierRating.A_TIER.value, 42000),
            ("AKM", "AKM", WeaponCategory.ASSAULT_RIFLE.value, TierRating.B_TIER.value, 38000),
            ("M4A1", "M4A1", WeaponCategory.ASSAULT_RIFLE.value, TierRating.S_TIER.value, 65000),
            ("HK 416", "HK 416", WeaponCategory.ASSAULT_RIFLE.value, TierRating.S_TIER.value, 72000),
            ("MP-153", "MP-153", WeaponCategory.SHOTGUN.value, TierRating.B_TIER.value, 15000),
            ("MP5", "MP5", WeaponCategory.SMG.value, TierRating.A_TIER.value, 28000),
            ("PP-19-01 –í–∏—Ç—è–∑—å", "PP-19-01 Vityaz", WeaponCategory.SMG.value, TierRating.B_TIER.value, 22000),
            ("–°–í–î", "SVD", WeaponCategory.DMR.value, TierRating.A_TIER.value, 55000),
            ("–ú–æ—Å–∏–Ω", "Mosin", WeaponCategory.SNIPER.value, TierRating.C_TIER.value, 25000),
            ("–°–í-98", "SV-98", WeaponCategory.SNIPER.value, TierRating.B_TIER.value, 48000),
            ("–ü–ú", "PM", WeaponCategory.PISTOL.value, TierRating.D_TIER.value, 5000),
            ("Glock 17", "Glock 17", WeaponCategory.PISTOL.value, TierRating.B_TIER.value, 12000),
            ("–ü–ö–ú", "PKM", WeaponCategory.LMG.value, TierRating.A_TIER.value, 95000),
        ]
        
        for weapon in weapons:
            await conn.execute(
                "INSERT INTO weapons (name_ru, name_en, category, tier_rating, base_price) VALUES (?, ?, ?, ?, ?)",
                weapon
            )
        await conn.commit()
        
        # Add modules
        print("   üîß –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥—É–ª–µ–π...")
        modules = [
            # AK-74N modules
            ("–¶–µ–≤—å–µ Zenit B-10M", "Zenit B-10M handguard", 12500, "Skier", 2, "handguard"),
            ("–ü—Ä–∏–∫–ª–∞–¥ Zenit PT-1", "Zenit PT-1 stock", 28000, "Skier", 3, "stock"),
            ("–ü—Ä–∏—Ü–µ–ª –ü–ö–ê", "PKA sight", 8500, "Prapor", 2, "sight"),
            ("–†—É–∫–æ—è—Ç—å RK-3", "RK-3 grip", 4200, "Mechanic", 1, "grip"),
            ("–ì–ª—É—à–∏—Ç–µ–ª—å PBS-4", "PBS-4 suppressor", 32000, "Prapor", 3, "muzzle"),
            
            # M4A1 modules
            ("–¶–µ–≤—å–µ Daniel Defense RIS II", "Daniel Defense RIS II rail", 45000, "Peacekeeper", 3, "handguard"),
            ("–ü—Ä–∏–∫–ª–∞–¥ Magpul MOE", "Magpul MOE stock", 18000, "Mechanic", 2, "stock"),
            ("–ü—Ä–∏—Ü–µ–ª EOTech EXPS3", "EOTech EXPS3 sight", 42000, "Peacekeeper", 3, "sight"),
            ("–†—É–∫–æ—è—Ç—å Magpul RVG", "Magpul RVG grip", 6500, "Mechanic", 2, "grip"),
            ("–ì–ª—É—à–∏—Ç–µ–ª—å SilencerCo Saker 556", "SilencerCo Saker 556", 58000, "Peacekeeper", 4, "muzzle"),
            
            # MP-153 modules
            ("–ü—Ä–∏–∫–ª–∞–¥ GK-02", "GK-02 stock", 8500, "Jaeger", 2, "stock"),
            ("–¶–µ–≤—å–µ Magpul", "Magpul handguard", 15000, "Mechanic", 2, "handguard"),
            ("–ö–æ–ª–ª–∏–º–∞—Ç–æ—Ä", "Red dot sight", 5500, "Prapor", 1, "sight"),
            
            # MP5 modules
            ("–¶–µ–≤—å–µ Navy", "Navy handguard", 12000, "Mechanic", 2, "handguard"),
            ("–ü—Ä–∏–∫–ª–∞–¥ A3", "A3 stock", 9500, "Mechanic", 2, "stock"),
            ("–ì–ª—É—à–∏—Ç–µ–ª—å SD", "SD suppressor", 38000, "Peacekeeper", 3, "muzzle"),
            
            # SVD modules
            ("–ü—Ä–∏–∫–ª–∞–¥ –º–æ–¥–µ—Ä–Ω", "Modern stock", 25000, "Jaeger", 3, "stock"),
            ("–û–ø—Ç–∏–∫–∞ –ü–°–û-1", "PSO-1 scope", 18000, "Prapor", 2, "sight"),
            ("–ì–ª—É—à–∏—Ç–µ–ª—å –°–í–î", "SVD suppressor", 45000, "Jaeger", 4, "muzzle"),
        ]
        
        for module in modules:
            await conn.execute(
                "INSERT INTO modules (name_ru, name_en, price, trader, loyalty_level, slot_type) VALUES (?, ?, ?, ?, ?, ?)",
                module
            )
        await conn.commit()
        
        # Add builds
        print("   üì¶ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–±–æ—Ä–æ–∫...")
        builds = [
            # AK-74N Meta Build
            {
                "weapon_id": 1,
                "category": BuildCategory.META.value,
                "name_ru": "–ú–µ—Ç–∞ —Å–±–æ—Ä–∫–∞ AK-74N",
                "name_en": "AK-74N Meta Build",
                "total_cost": 120200,
                "min_loyalty_level": 3,
                "modules": json.dumps([1, 2, 3, 4, 5]),
                "planner_link": "https://tarkov-builds.com/example1"
            },
            # AK-74N Quest Build
            {
                "weapon_id": 1,
                "category": BuildCategory.QUEST.value,
                "name_ru": "–ö–≤–µ—Å—Ç–æ–≤–∞—è AK-74N",
                "name_en": "Quest AK-74N",
                "quest_name_ru": "–û—Ä—É–∂–µ–π–Ω–∏–∫ - –ß–∞—Å—Ç—å 4",
                "quest_name_en": "Gunsmith - Part 4",
                "total_cost": 85000,
                "min_loyalty_level": 2,
                "modules": json.dumps([1, 3, 4]),
                "planner_link": "https://tarkov-builds.com/example2"
            },
            # M4A1 Meta Build
            {
                "weapon_id": 4,
                "category": BuildCategory.META.value,
                "name_ru": "–ú–µ—Ç–∞ —Å–±–æ—Ä–∫–∞ M4A1",
                "name_en": "M4A1 Meta Build",
                "total_cost": 234500,
                "min_loyalty_level": 4,
                "modules": json.dumps([6, 7, 8, 9, 10]),
                "planner_link": "https://tarkov-builds.com/example3"
            },
            # MP-153 Budget Build
            {
                "weapon_id": 6,
                "category": BuildCategory.RANDOM.value,
                "name_ru": "–ë—é–¥–∂–µ—Ç–Ω–∞—è MP-153",
                "name_en": "Budget MP-153",
                "total_cost": 44000,
                "min_loyalty_level": 2,
                "modules": json.dumps([11, 12, 13]),
                "planner_link": None
            },
            # MP5 Quest Build
            {
                "weapon_id": 7,
                "category": BuildCategory.QUEST.value,
                "name_ru": "MP5 –¥–ª—è –∫–≤–µ—Å—Ç–∞",
                "name_en": "Quest MP5",
                "quest_name_ru": "–ö–∞—Ä–∞—Ç–µ–ª—å - –ß–∞—Å—Ç—å 5",
                "quest_name_en": "The Punisher - Part 5",
                "total_cost": 87500,
                "min_loyalty_level": 3,
                "modules": json.dumps([14, 15, 16]),
                "planner_link": "https://tarkov-builds.com/example4"
            },
            # SVD Meta Build
            {
                "weapon_id": 9,
                "category": BuildCategory.META.value,
                "name_ru": "–ú–µ—Ç–∞ –°–í–î",
                "name_en": "Meta SVD",
                "total_cost": 143000,
                "min_loyalty_level": 4,
                "modules": json.dumps([17, 18, 19]),
                "planner_link": "https://tarkov-builds.com/example5"
            },
        ]
        
        for build in builds:
            await conn.execute(
                """INSERT INTO builds 
                (weapon_id, category, name_ru, name_en, quest_name_ru, quest_name_en, 
                total_cost, min_loyalty_level, modules, planner_link) 
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)""",
                (
                    build["weapon_id"],
                    build["category"],
                    build.get("name_ru"),
                    build.get("name_en"),
                    build.get("quest_name_ru"),
                    build.get("quest_name_en"),
                    build["total_cost"],
                    build["min_loyalty_level"],
                    build["modules"],
                    build.get("planner_link")
                )
            )
        await conn.commit()
        
        # Add quests
        print("   üìú –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–≤–µ—Å—Ç–æ–≤...")
        quests = [
            {
                "name_ru": "–û—Ä—É–∂–µ–π–Ω–∏–∫ - –ß–∞—Å—Ç—å 4",
                "name_en": "Gunsmith - Part 4",
                "description_ru": "–°–æ–±—Ä–∞—Ç—å AK-74N —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏ –¥–ª—è –ú–µ—Ö–∞–Ω–∏–∫–∞",
                "description_en": "Build an AK-74N with specific stats for Mechanic",
                "required_builds": json.dumps([2])
            },
            {
                "name_ru": "–ö–∞—Ä–∞—Ç–µ–ª—å - –ß–∞—Å—Ç—å 5",
                "name_en": "The Punisher - Part 5",
                "description_ru": "–£–±–∏—Ç—å PMC —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º MP5 —Å –≥–ª—É—à–∏—Ç–µ–ª–µ–º",
                "description_en": "Kill PMCs using suppressed MP5",
                "required_builds": json.dumps([5])
            }
        ]
        
        for quest in quests:
            await conn.execute(
                """INSERT INTO quests 
                (name_ru, name_en, description_ru, description_en, required_builds) 
                VALUES (?, ?, ?, ?, ?)""",
                (
                    quest["name_ru"],
                    quest["name_en"],
                    quest["description_ru"],
                    quest["description_en"],
                    quest["required_builds"]
                )
            )
        
        await conn.commit()
        print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã!")
        return True


async def main():
    """Main function to run the population script."""
    print("="*60)
    print("  EFT Helper - –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
    print("="*60)
    print()
    
    # Database path relative to root
    db_path = os.path.join(os.path.dirname(os.path.dirname(__file__)), "data", "eft_helper.db")
    db = Database(db_path)
    await db.init_db()
    
    success = await populate_sample_data(db)
    
    if success:
        print("\nüìä –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø–æ–ª–Ω–µ–Ω–∞:")
        print("   ‚Ä¢ 14 –æ—Ä—É–∂–∏–π")
        print("   ‚Ä¢ 19 –º–æ–¥—É–ª–µ–π")
        print("   ‚Ä¢ 6 —Å–±–æ—Ä–æ–∫")
        print("   ‚Ä¢ 8 —Ç–æ—Ä–≥–æ–≤—Ü–µ–≤")
        print("   ‚Ä¢ 2 –∫–≤–µ—Å—Ç–∞")
        print("\nüéÆ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
    else:
        print("\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
    
    print("="*60)
    return success


if __name__ == "__main__":
    asyncio.run(main())
