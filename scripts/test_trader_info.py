"""Test trader information display in quest builds."""
import asyncio
import sys
import os

sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from api_clients import TarkovAPIClient
from services.quest_build_service import QuestBuildService

async def test():
    """Test trader info."""
    api = TarkovAPIClient()
    service = QuestBuildService(api)
    
    try:
        print("=" * 70)
        print("–¢–µ—Å—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ—Ä–≥–æ–≤—Ü–∞—Ö")
        print("=" * 70)
        
        # Get quest tasks
        tasks = await api.get_weapon_build_tasks(lang="ru")
        
        # Find Gunsmith Part 10
        target_quest = None
        for task in tasks:
            if "–ß–∞—Å—Ç—å 10" in task.get('name', ''):
                target_quest = task
                break
        
        if not target_quest:
            print("‚ùå –ö–≤–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
        
        print(f"\n‚úÖ –ö–≤–µ—Å—Ç –Ω–∞–π–¥–µ–Ω: {target_quest.get('name')}")
        
        # Get buildWeapon objective
        objectives = target_quest.get('objectives', [])
        build_obj = None
        for obj in objectives:
            if obj.get('type') == 'buildWeapon':
                build_obj = obj
                break
        
        # Parse requirements
        requirements = service.parse_quest_requirements(build_obj)
        
        # Generate build
        print("\n‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–±–æ—Ä–∫–∏...")
        build = await service.generate_quest_build(requirements, "ru")
        
        if not build:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–±–æ—Ä–∫—É!")
            return
        
        print("\n" + "=" * 70)
        print("–†–ï–ó–£–õ–¨–¢–ê–¢: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ—Ä–≥–æ–≤—Ü–∞—Ö")
        print("=" * 70)
        
        weapon = build['weapon']
        modules = build.get('modules', [])
        
        print(f"\nüî´ –û—Ä—É–∂–∏–µ: {weapon.get('name')}")
        print(f"\nüîß –ú–æ–¥—É–ª–∏ ({len(modules)}):\n")
        
        for i, mod in enumerate(modules[:10], 1):
            name = mod.get('name', 'Unknown')
            price = mod.get('price', 0)
            trader = mod.get('trader', 'Unknown')
            level = mod.get('trader_level', '?')
            trader_price = mod.get('trader_price', 0)
            
            print(f"{i}. {name}")
            print(f"   üí∞ –ë–∞—Ä–∞—Ö–æ–ª–∫–∞: {price:,}‚ÇΩ")
            
            if trader != 'Flea Market' and trader_price > 0:
                print(f"   üë§ {trader} (LL{level}): {trader_price:,}‚ÇΩ")
            elif trader == 'Flea Market':
                print(f"   üè™ –¢–æ–ª—å–∫–æ –Ω–∞ –±–∞—Ä–∞—Ö–æ–ª–∫–µ")
            else:
                print(f"   ‚ö†Ô∏è –¢–æ—Ä–≥–æ–≤–µ—Ü: {trader}")
            print()
        
        if len(modules) > 10:
            print(f"... –∏ –µ—â—ë {len(modules) - 10} –º–æ–¥—É–ª–µ–π")
        
        print("=" * 70)
        
    finally:
        await api.close()

if __name__ == "__main__":
    asyncio.run(test())
