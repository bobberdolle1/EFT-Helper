"""Test quest build generation locally without Telegram."""
import asyncio
import sys
import os

sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from api_clients import TarkovAPIClient
from services.quest_build_service import QuestBuildService

async def test():
    """Test quest build generation."""
    api = TarkovAPIClient()
    service = QuestBuildService(api)
    
    try:
        print("=" * 70)
        print("–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–≤–µ—Å—Ç–æ–≤–æ–π —Å–±–æ—Ä–∫–∏")
        print("=" * 70)
        
        # Get quest tasks
        print("\n1. –ó–∞–≥—Ä—É–∑–∫–∞ –∫–≤–µ—Å—Ç–æ–≤ –ú–µ—Ö–∞–Ω–∏–∫–∞...")
        tasks = await api.get_weapon_build_tasks(lang="ru")
        
        if not tasks:
            print("‚ùå –ù–µ—Ç –∫–≤–µ—Å—Ç–æ–≤!")
            return
        
        # Test first quest (Gunsmith Part 1)
        quest = tasks[0]
        print(f"\n2. –ö–≤–µ—Å—Ç: {quest.get('name')}")
        
        # Get buildWeapon objective
        objectives = quest.get('objectives', [])
        build_obj = None
        for obj in objectives:
            if obj.get('type') == 'buildWeapon':
                build_obj = obj
                break
        
        if not build_obj:
            print("‚ùå –ù–µ—Ç buildWeapon objective!")
            return
        
        # Parse requirements
        print("\n3. –ü–∞—Ä—Å–∏–Ω–≥ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π...")
        requirements = service.parse_quest_requirements(build_obj)
        
        if not requirements:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è!")
            return
        
        print(f"\n   –û—Ä—É–∂–∏–µ: {requirements.weapon_name}")
        print(f"   –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:")
        for req in requirements.requirements:
            # Skip zero requirements
            if req.value == 0 and req.compare_method == '>=':
                continue
            print(f"     ‚Ä¢ {req.name} {req.compare_method} {req.value}")
        
        # Generate build
        print("\n4. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–±–æ—Ä–∫–∏...")
        build = await service.generate_quest_build(requirements, "ru")
        
        if not build:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–±–æ—Ä–∫—É!")
            return
        
        # Display results
        print("\n" + "=" * 70)
        print("–†–ï–ó–£–õ–¨–¢–ê–¢")
        print("=" * 70)
        
        weapon = build['weapon']
        modules = build.get('modules', [])
        stats = build['stats']
        meets_req = build['meets_requirements']
        
        print(f"\nüî´ –û—Ä—É–∂–∏–µ: {weapon.get('name')}")
        print(f"   –¶–µ–Ω–∞: {weapon.get('avg24hPrice', 0):,}‚ÇΩ")
        
        if modules:
            print(f"\nüîß –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –º–æ–¥—É–ª–µ–π: {len(modules)}")
            for i, mod in enumerate(modules[:10], 1):
                print(f"   {i}. {mod['name']} - {mod['price']:,}‚ÇΩ")
            if len(modules) > 10:
                print(f"   ... –∏ –µ—â—ë {len(modules) - 10} –º–æ–¥—É–ª–µ–π")
        else:
            print("\n‚ö†Ô∏è –ù–µ—Ç –º–æ–¥—É–ª–µ–π –≤ default preset")
        
        print(f"\nüìä –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:")
        print(f"   –≠—Ä–≥–æ–Ω–æ–º–∏–∫–∞: {stats['ergonomics']:.0f}")
        print(f"   –û—Ç–¥–∞—á–∞: {stats['recoil']:.0f}")
        print(f"   –ü—Ä–æ—á–Ω–æ—Å—Ç—å: {stats['durability']:.0f}")
        print(f"   –í–µ—Å: {stats['weight']:.2f} –∫–≥")
        
        print(f"\nüí∞ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {build['total_cost']:,}‚ÇΩ")
        
        if meets_req:
            print("\n‚úÖ –í—Å–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!")
        else:
            print("\n‚ùå –ù–µ –≤—Å–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã")
            print("   –ù—É–∂–Ω—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–æ–¥—É–ª–∏")
        
        print("\n" + "=" * 70)
        
    finally:
        await api.close()

if __name__ == "__main__":
    asyncio.run(test())
