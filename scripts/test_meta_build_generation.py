"""Test meta build generation from API presets."""
import asyncio
import sys
import os

sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from services.build_service import BuildService
from database import Database
from database.config import settings

async def test():
    """Test meta build generation."""
    db = Database("data/eft_helper.db")
    await db.init_db()
    
    service = BuildService(db, None)
    
    print("=" * 70)
    print("–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–µ—Ç–∞—Å–±–æ—Ä–æ–∫")
    print("=" * 70)
    
    # Test weapons from META_BUILDS
    test_weapons = [
        "AK-74M",
        "M4A1", 
        "HK 416",
        "AKM"
    ]
    
    for weapon_name in test_weapons:
        print(f"\n{'='*70}")
        print(f"–¢–µ—Å—Ç–∏—Ä—É–µ–º: {weapon_name}")
        print('='*70)
        
        result = await service.generate_meta_build_from_preset(weapon_name, "ru")
        
        if not result:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–±–æ—Ä–∫—É –¥–ª—è {weapon_name}")
            continue
        
        weapon = result['weapon']
        modules = result['modules']
        preset_name = result['preset_name']
        total_cost = result['total_cost']
        
        print(f"\n‚úÖ –°–±–æ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞!")
        print(f"\nüî´ –û—Ä—É–∂–∏–µ: {weapon.get('name')}")
        print(f"üì¶ Preset: {preset_name}")
        print(f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {total_cost:,}‚ÇΩ")
        print(f"\nüîß –ú–æ–¥—É–ª–µ–π: {len(modules)}")
        
        if modules:
            print("\n–ü–µ—Ä–≤—ã–µ 5 –º–æ–¥—É–ª–µ–π:")
            for i, mod in enumerate(modules[:5], 1):
                name = mod.get('name', 'Unknown')
                slot = mod.get('slot', 'Unknown')
                price = mod.get('price', 0)
                trader = mod.get('trader', 'Unknown')
                level = mod.get('trader_level', '?')
                
                # Only show slot if it's determined
                slot_text = f"[{slot}] " if slot and slot != 'Unknown' else ""
                print(f"  {i}. {slot_text}{name}")
                print(f"     üí∞ {price:,}‚ÇΩ | üë§ {trader} (LL{level})")
    
    print("\n" + "=" * 70)
    print("‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω")
    print("=" * 70)

if __name__ == "__main__":
    asyncio.run(test())
