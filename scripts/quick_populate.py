"""Quick script to populate database with all available data."""
import asyncio
import aiosqlite
import json
import sys
import os

sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from database import Database, BuildCategory, WeaponCategory, TierRating
from database.meta_builds_data import META_BUILDS


async def quick_populate():
    """Quickly populate database with comprehensive weapon and build data."""
    print("="*60)
    print("  –ë–´–°–¢–†–û–ï –ó–ê–ü–û–õ–ù–ï–ù–ò–ï –ë–ê–ó–´ –î–ê–ù–ù–´–•")
    print("="*60)
    print()
    
    db_path = os.path.join(os.path.dirname(os.path.dirname(__file__)), "data", "eft_helper.db")
    db = Database(db_path)
    await db.init_db()
    
    async with aiosqlite.connect(db.db_path) as conn:
        # 1. Add many more weapons
        print("üî´ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ä—É–∂–∏—è...")
        weapons = [
            # Assault Rifles
            ("–ê–ö-74–ù", "AK-74N", "assault_rifle", "A", 35000, "5.45x39–º–º", 42, 180, 85, 650, 400),
            ("–ê–ö-74–ú", "AK-74M", "assault_rifle", "A", 42000, "5.45x39–º–º", 45, 175, 82, 650, 400),
            ("–ê–ö–ú", "AKM", "assault_rifle", "B", 38000, "7.62x39–º–º", 38, 230, 110, 600, 400),
            ("–ê–ö-103", "AK-103", "assault_rifle", "B", 45000, "7.62x39–º–º", 40, 220, 105, 600, 400),
            ("–ê–ö-104", "AK-104", "assault_rifle", "B", 42000, "7.62x39–º–º", 42, 210, 100, 600, 350),
            ("M4A1", "M4A1", "assault_rifle", "S", 65000, "5.56x45–º–º", 55, 120, 65, 800, 400),
            ("HK 416", "HK 416", "assault_rifle", "S", 72000, "5.56x45–º–º", 58, 110, 62, 850, 400),
            ("ADAR 2-15", "ADAR 2-15", "assault_rifle", "C", 28000, "5.56x45–º–º", 48, 150, 75, 800, 400),
            ("TX-15", "TX-15", "assault_rifle", "B", 52000, "5.56x45–º–º", 52, 130, 68, 800, 400),
            ("–ê–° –í–ê–õ", "AS VAL", "assault_rifle", "A", 65000, "9x39–º–º", 48, 180, 90, 900, 300),
            ("–í–°–° –í–∏–Ω—Ç–æ—Ä–µ–∑", "VSS Vintorez", "dmr", "A", 58000, "9x39–º–º", 42, 210, 105, 900, 400),
            
            # SMGs
            ("–ú–ü5", "MP5", "smg", "A", 28000, "9x19–º–º", 65, 95, 48, 800, 100),
            ("–ú–ü–•", "MPX", "smg", "A", 32000, "9x19–º–º", 68, 90, 45, 850, 100),
            ("–ü–ü-19-01 –í–∏—Ç—è–∑—å", "PP-19-01 Vityaz", "smg", "B", 22000, "9x19–º–º", 58, 105, 52, 700, 100),
            ("PP-91 –ö–µ–¥—Ä", "PP-91 Kedr", "smg", "C", 12000, "9x18–º–º", 62, 110, 58, 900, 80),
            ("–ü–ü–®-41", "PPSh-41", "smg", "D", 18000, "7.62x25–º–º", 35, 180, 95, 1000, 100),
            ("–ü90", "P90", "smg", "S", 48000, "5.7x28–º–º", 75, 75, 40, 900, 150),
            ("UMP 45", "UMP 45", "smg", "B", 26000, ".45 ACP", 55, 120, 62, 600, 100),
            ("–í–µ–∫—Ç–æ—Ä 45", "Vector 45", "smg", "S", 58000, ".45 ACP", 72, 68, 35, 1100, 100),
            
            # Shotguns
            ("–ú–†-153", "MP-153", "shotgun", "B", 15000, "12–∫", 35, 280, 150, 30, 50),
            ("–ú–†-155", "MP-155", "shotgun", "B", 18000, "12–∫", 38, 270, 145, 30, 50),
            ("–°–∞–π–≥–∞-12", "Saiga-12", "shotgun", "A", 35000, "12–∫", 42, 250, 135, 400, 50),
            ("–ú–†-133", "MP-133", "shotgun", "C", 12000, "12–∫", 32, 290, 155, 30, 50),
            ("–ú–†-43-1–°", "MP-43-1S", "shotgun", "D", 8000, "12–∫/20–∫", 25, 320, 170, 30, 40),
            
            # DMRs
            ("–°–í–î", "SVD", "dmr", "A", 55000, "7.62x54–º–ºR", 22, 320, 160, 600, 800),
            ("–°–í–î–°", "SVDS", "dmr", "A", 62000, "7.62x54–º–ºR", 25, 310, 155, 600, 800),
            ("SR-25", "SR-25", "dmr", "S", 85000, "7.62x51–º–º", 35, 240, 125, 700, 800),
            ("–ú1–ê", "M1A", "dmr", "A", 68000, "7.62x51–º–º", 32, 260, 135, 700, 800),
            ("RSASS", "RSASS", "dmr", "S", 95000, "7.62x51–º–º", 38, 230, 120, 700, 800),
            
            # Sniper Rifles
            ("–ú–æ—Å–∏–Ω", "Mosin", "sniper", "C", 25000, "7.62x54–º–ºR", 15, 380, 180, 30, 800),
            ("–°–í-98", "SV-98", "sniper", "B", 48000, "7.62x54–º–ºR", 18, 350, 170, 30, 800),
            ("–¢-5000–ú", "T-5000M", "sniper", "A", 85000, "7.62x51–º–º", 20, 340, 165, 30, 900),
            ("DVL-10", "DVL-10", "sniper", "S", 125000, "7.62x51–º–º", 25, 320, 155, 30, 900),
            ("–ú700", "M700", "sniper", "B", 72000, "7.62x51–º–º", 22, 330, 160, 30, 850),
            ("AXMC", "AXMC", "sniper", "S", 185000, ".338 Lapua", 28, 380, 185, 30, 1200),
            
            # Pistols
            ("–ü–ú", "PM", "pistol", "D", 5000, "9x18–º–º", 75, 140, 75, 30, 50),
            ("–ê–ü–°", "APS", "pistol", "C", 8000, "9x18–º–º", 68, 150, 80, 750, 50),
            ("Glock 17", "Glock 17", "pistol", "B", 12000, "9x19–º–º", 85, 95, 50, 30, 100),
            ("Glock 18C", "Glock 18C", "pistol", "A", 18000, "9x19–º–º", 82, 105, 55, 1200, 100),
            ("–ú9–ê3", "M9A3", "pistol", "B", 14000, "9x19–º–º", 80, 100, 52, 30, 100),
            ("–ú45–ê1", "M45A1", "pistol", "B", 16000, ".45 ACP", 78, 115, 60, 30, 100),
            ("SR-1MP", "SR-1MP", "pistol", "A", 22000, "9x21–º–º", 88, 85, 45, 30, 150),
            ("–¢–¢", "TT", "pistol", "D", 6000, "7.62x25–º–º", 70, 155, 82, 30, 80),
            ("–°—Ç–µ—á–∫–∏–Ω", "Stechkin APS", "pistol", "C", 9000, "9x18–º–º", 65, 160, 85, 750, 50),
            ("FN Five-seveN", "FN Five-seveN", "pistol", "A", 24000, "5.7x28–º–º", 90, 78, 42, 30, 150),
            
            # LMGs
            ("–ü–ö–ú", "PKM", "lmg", "A", 95000, "7.62x54–º–ºR", 25, 280, 145, 650, 600),
            ("–†–ü–ö-16", "RPK-16", "lmg", "A", 85000, "5.45x39–º–º", 32, 200, 100, 650, 500),
        ]
        
        weapon_count = 0
        for weapon in weapons:
            try:
                await conn.execute(
                    """INSERT OR IGNORE INTO weapons 
                    (name_ru, name_en, category, tier_rating, base_price, caliber, ergonomics, 
                     recoil_vertical, recoil_horizontal, fire_rate, effective_range) 
                    VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)""",
                    weapon
                )
                weapon_count += 1
            except:
                pass
        await conn.commit()
        print(f"   ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –æ—Ä—É–∂–∏—è: {weapon_count}")
        
        # 2. Add meta builds from META_BUILDS
        print("‚öîÔ∏è  –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–µ—Ç–∞-—Å–±–æ—Ä–æ–∫...")
        meta_count = 0
        
        for weapon_name, builds in META_BUILDS.items():
            async with conn.execute(
                "SELECT id FROM weapons WHERE name_en LIKE ? OR name_ru LIKE ? LIMIT 1",
                (f"%{weapon_name}%", f"%{weapon_name}%")
            ) as cursor:
                weapon_row = await cursor.fetchone()
            
            if not weapon_row:
                continue
            
            weapon_id = weapon_row[0]
            
            for build_type, build_data in builds.items():
                name_ru = build_data.get("name_ru", f"{weapon_name} {build_type}")
                name_en = build_data.get("name_en", f"{weapon_name} {build_type}")
                
                async with conn.execute(
                    "SELECT id FROM builds WHERE weapon_id = ? AND name_en = ?",
                    (weapon_id, name_en)
                ) as cursor:
                    existing = await cursor.fetchone()
                
                if existing:
                    continue
                
                estimated_cost = build_data.get("estimated_cost", 100000)
                min_loyalty = build_data.get("min_loyalty", 2)
                
                await conn.execute(
                    """INSERT INTO builds 
                    (weapon_id, category, name_ru, name_en, total_cost, min_loyalty_level, modules, planner_link)
                    VALUES (?, ?, ?, ?, ?, ?, ?, ?)""",
                    (weapon_id, BuildCategory.META.value, name_ru, name_en, 
                     estimated_cost, min_loyalty, json.dumps([]), None)
                )
                meta_count += 1
        
        await conn.commit()
        print(f"   ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –º–µ—Ç–∞-—Å–±–æ—Ä–æ–∫: {meta_count}")
        
        # 3. Add some basic modules
        print("üîß –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥—É–ª–µ–π...")
        modules = [
            ("–ü—Ä–∏–∫–ª–∞–¥ –±–∞–∑–æ–≤—ã–π", "Basic stock", 5000, "Prapor", 1, "stock", 5500),
            ("–ü—Ä–∏—Ü–µ–ª –∫–æ–ª–ª–∏–º–∞—Ç–æ—Ä", "Red dot sight", 8000, "Prapor", 1, "sight", 8500),
            ("–†—É–∫–æ—è—Ç—å –±–∞–∑–æ–≤–∞—è", "Basic grip", 3000, "Mechanic", 1, "grip", 3500),
            ("–¶–µ–≤—å–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç", "Standard handguard", 6000, "Mechanic", 1, "handguard", 6500),
            ("–ì–ª—É—à–∏—Ç–µ–ª—å —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π", "Universal suppressor", 35000, "Peacekeeper", 2, "muzzle", 38000),
            ("–ú–∞–≥–∞–∑–∏–Ω —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π", "Extended magazine", 12000, "Mechanic", 2, "magazine", 13000),
        ]
        
        module_count = 0
        for module in modules:
            try:
                await conn.execute(
                    """INSERT OR IGNORE INTO modules 
                    (name_ru, name_en, price, trader, loyalty_level, slot_type, flea_price) 
                    VALUES (?, ?, ?, ?, ?, ?, ?)""",
                    module
                )
                module_count += 1
            except:
                pass
        await conn.commit()
        print(f"   ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –º–æ–¥—É–ª–µ–π: {module_count}")
        
        # Count totals
        async with conn.execute("SELECT COUNT(*) FROM weapons") as cursor:
            total_weapons = (await cursor.fetchone())[0]
        async with conn.execute("SELECT COUNT(*) FROM builds WHERE category = 'meta'") as cursor:
            total_meta = (await cursor.fetchone())[0]
        async with conn.execute("SELECT COUNT(*) FROM builds") as cursor:
            total_builds = (await cursor.fetchone())[0]
    
    print()
    print("="*60)
    print("‚úÖ –ë–ê–ó–ê –î–ê–ù–ù–´–• –ó–ê–ü–û–õ–ù–ï–ù–ê!")
    print("="*60)
    print(f"\nüìä –ò—Ç–æ–≥–æ –≤ –±–∞–∑–µ:")
    print(f"   ‚Ä¢ –û—Ä—É–∂–∏–µ: {total_weapons}")
    print(f"   ‚Ä¢ –í—Å–µ —Å–±–æ—Ä–∫–∏: {total_builds}")
    print(f"   ‚Ä¢ –ú–µ—Ç–∞-—Å–±–æ—Ä–∫–∏: {total_meta}")
    print(f"   ‚Ä¢ –ú–æ–¥—É–ª–∏: {module_count}")
    print()
    print("üéÆ –¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ:")
    print("   1. üîç –ü–æ–∏—Å–∫ –æ—Ä—É–∂–∏—è - —Ç–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–Ω–æ 50+ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤")
    print("   2. ‚öîÔ∏è –ú–µ—Ç–∞-—Å–±–æ—Ä–∫–∏ - –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤—Å–µ –∏–∑ meta_builds_data.py")
    print("   3. üé≤ –°–ª—É—á–∞–π–Ω–∞—è —Å–±–æ—Ä–∫–∞ - —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –ø–æ–ª–Ω—ã–º —Å–ø–∏—Å–∫–æ–º –æ—Ä—É–∂–∏—è")
    print("="*60)


if __name__ == "__main__":
    asyncio.run(quick_populate())
