"""Test magazine capacity optimization for Gunsmith Part 10."""
import asyncio
import sys
import os

sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from api_clients import TarkovAPIClient
from services.quest_build_service import QuestBuildService

async def test():
    """Test magazine capacity optimization."""
    api = TarkovAPIClient()
    service = QuestBuildService(api)
    
    try:
        print("=" * 70)
        print("–¢–µ—Å—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –µ–º–∫–æ—Å—Ç–∏ –º–∞–≥–∞–∑–∏–Ω–∞ (–ö–≤–µ—Å—Ç 10)")
        print("=" * 70)
        
        # Get quest tasks
        print("\n1. –ó–∞–≥—Ä—É–∑–∫–∞ –∫–≤–µ—Å—Ç–æ–≤...")
        tasks = await api.get_weapon_build_tasks(lang="ru")
        
        # Find Gunsmith Part 10
        target_quest = None
        for task in tasks:
            if "–ß–∞—Å—Ç—å 10" in task.get('name', ''):
                target_quest = task
                break
        
        if not target_quest:
            print("‚ùå –ö–≤–µ—Å—Ç '–ß–∞—Å—Ç—å 10' –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
        
        quest_name = target_quest.get('name')
        print(f"\n2. –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–≤–µ—Å—Ç: {quest_name}")
        
        # Get buildWeapon objective
        objectives = target_quest.get('objectives', [])
        build_obj = None
        for obj in objectives:
            if obj.get('type') == 'buildWeapon':
                build_obj = obj
                break
        
        if not build_obj:
            print("‚ùå –ù–µ—Ç buildWeapon objective!")
            return
        
        # Parse requirements
        print("\n3. –ü–∞—Ä—Å–∏–Ω–≥ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π...")
        requirements = service.parse_quest_requirements(build_obj)
        
        if not requirements:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è!")
            return
        
        print(f"\n   –û—Ä—É–∂–∏–µ: {requirements.weapon_name}")
        print(f"   –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:")
        for req in requirements.requirements:
            if req.value == 0 and req.compare_method == '>=':
                continue
            if req.name == 'magazineCapacity':
                print(f"     ‚Ä¢ ‚≠ê {req.name} {req.compare_method} {req.value} (–ì–õ–ê–í–ù–û–ï –¢–†–ï–ë–û–í–ê–ù–ò–ï)")
            else:
                print(f"     ‚Ä¢ {req.name} {req.compare_method} {req.value}")
        
        # Generate build
        print("\n4. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–±–æ—Ä–∫–∏...")
        build = await service.generate_quest_build(requirements, "ru")
        
        if not build:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–±–æ—Ä–∫—É!")
            return
        
        # Display results
        print("\n" + "=" * 70)
        print("–†–ï–ó–£–õ–¨–¢–ê–¢ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò")
        print("=" * 70)
        
        weapon = build['weapon']
        modules = build.get('modules', [])
        stats = build['stats']
        meets_req = build['meets_requirements']
        
        print(f"\nüî´ –û—Ä—É–∂–∏–µ: {weapon.get('name')}")
        
        # Find magazine
        magazine = None
        for mod in modules:
            if 'magazine' in mod.get('name', '').lower() or '–º–∞–≥–∞–∑–∏–Ω' in mod.get('name', '').lower():
                magazine = mod
                break
        
        if magazine:
            print(f"\nüì¶ –í—ã–±—Ä–∞–Ω–Ω—ã–π –º–∞–≥–∞–∑–∏–Ω:")
            print(f"   {magazine.get('name')}")
            print(f"   –¶–µ–Ω–∞: {magazine.get('price', 0):,}‚ÇΩ")
        
        print(f"\nüìä –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:")
        
        # Check magazineCapacity specifically
        mag_req = next((r for r in requirements.requirements if r.name == 'magazineCapacity'), None)
        if mag_req:
            mag_capacity = stats.get('magazineCapacity', 0)
            is_met = service._check_single_requirement(mag_capacity, mag_req)
            status = "‚úÖ" if is_met else "‚ùå"
            
            print(f"   {status} –ï–º–∫–æ—Å—Ç—å –º–∞–≥–∞–∑–∏–Ω–∞: {mag_capacity:.0f} ({mag_req.compare_method} {mag_req.value:.0f})")
        
        # Show other important stats
        for req in requirements.requirements:
            if req.name in ['ergonomics', 'recoil', 'durability'] and req.value > 0:
                stat_value = stats.get(req.name, 0)
                is_met = service._check_single_requirement(stat_value, req)
                status = "‚úÖ" if is_met else "‚ùå"
                print(f"   {status} {req.name}: {stat_value:.0f} ({req.compare_method} {req.value})")
        
        print(f"\nüí∞ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {build['total_cost']:,}‚ÇΩ")
        
        if meets_req:
            print("\n‚úÖ –í–°–ï –¢–†–ï–ë–û–í–ê–ù–ò–Ø –ö–í–ï–°–¢–ê –í–´–ü–û–õ–ù–ï–ù–´!")
        else:
            print("\n‚ö†Ô∏è –ù–µ –≤—Å–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã")
        
        print("\n" + "=" * 70)
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
    finally:
        await api.close()

if __name__ == "__main__":
    asyncio.run(test())
