"""–°–∫—Ä–∏–ø—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –ø–æ–ª–µ–π."""
import asyncio
import aiosqlite
import json
import sys
import os

# Add parent directory to path
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))


async def migrate_database():
    """–ú–∏–≥—Ä–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤–µ—Ä—Å–∏–∏ 2.0 - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –ø–æ–ª–µ–π –∏ —É–¥–∞–ª–µ–Ω–∏–µ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö."""
    import os
    db_path = os.path.join(os.path.dirname(os.path.dirname(__file__)), "data", "eft_helper.db")
    
    print("üîÑ –ù–∞—á–∞–ª–æ –º–∏–≥—Ä–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤–µ—Ä—Å–∏–∏ 2.0...")
    
    async with aiosqlite.connect(db_path) as db:
        migrations_applied = []
        
        # –ú–∏–≥—Ä–∞—Ü–∏—è 1: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ trader_levels –≤ users
        async with db.execute("PRAGMA table_info(users)") as cursor:
            columns = await cursor.fetchall()
            column_names = [col[1] for col in columns]
        
        if "trader_levels" not in column_names:
            print("üìù –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ trader_levels –≤ —Ç–∞–±–ª–∏—Ü—É users...")
            await db.execute("ALTER TABLE users ADD COLUMN trader_levels TEXT")
            
            default_trader_levels = json.dumps({
                "prapor": 1,
                "therapist": 1,
                "fence": 1,
                "skier": 1,
                "peacekeeper": 1,
                "mechanic": 1,
                "ragman": 1,
                "jaeger": 1
            })
            
            await db.execute(
                "UPDATE users SET trader_levels = ?",
                (default_trader_levels,)
            )
            migrations_applied.append("trader_levels –≤ users")
        
        # –ú–∏–≥—Ä–∞—Ü–∏—è 2: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ flea_price –≤ weapons
        async with db.execute("PRAGMA table_info(weapons)") as cursor:
            columns = await cursor.fetchall()
            column_names = [col[1] for col in columns]
        
        if "flea_price" not in column_names:
            print("üìù –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ flea_price –≤ —Ç–∞–±–ª–∏—Ü—É weapons...")
            await db.execute("ALTER TABLE weapons ADD COLUMN flea_price INTEGER")
            migrations_applied.append("flea_price –≤ weapons")
        
        # –ú–∏–≥—Ä–∞—Ü–∏—è 3: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ flea_price –≤ modules
        async with db.execute("PRAGMA table_info(modules)") as cursor:
            columns = await cursor.fetchall()
            column_names = [col[1] for col in columns]
        
        if "flea_price" not in column_names:
            print("üìù –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ flea_price –≤ —Ç–∞–±–ª–∏—Ü—É modules...")
            await db.execute("ALTER TABLE modules ADD COLUMN flea_price INTEGER")
            migrations_applied.append("flea_price –≤ modules")
        
        # –ú–∏–≥—Ä–∞—Ü–∏—è 4: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ velocity –≤ weapons
        async with db.execute("PRAGMA table_info(weapons)") as cursor:
            columns = await cursor.fetchall()
            column_names = [col[1] for col in columns]
        
        if "velocity" not in column_names:
            print("üìù –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ velocity –≤ —Ç–∞–±–ª–∏—Ü—É weapons...")
            await db.execute("ALTER TABLE weapons ADD COLUMN velocity INTEGER")
            migrations_applied.append("velocity –≤ weapons")
        
        # –ú–∏–≥—Ä–∞—Ü–∏—è 5: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ default_width –∏ default_height –≤ weapons
        async with db.execute("PRAGMA table_info(weapons)") as cursor:
            columns = await cursor.fetchall()
            column_names = [col[1] for col in columns]
        
        if "default_width" not in column_names:
            print("üìù –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ default_width –≤ —Ç–∞–±–ª–∏—Ü—É weapons...")
            await db.execute("ALTER TABLE weapons ADD COLUMN default_width INTEGER")
            migrations_applied.append("default_width –≤ weapons")
        
        if "default_height" not in column_names:
            print("üìù –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ default_height –≤ —Ç–∞–±–ª–∏—Ü—É weapons...")
            await db.execute("ALTER TABLE weapons ADD COLUMN default_height INTEGER")
            migrations_applied.append("default_height –≤ weapons")
        
        # –ú–∏–≥—Ä–∞—Ü–∏—è 6: –£–¥–∞–ª–µ–Ω–∏–µ planner_link –∏–∑ builds (—Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ç–∞–±–ª–∏—Ü—ã –±–µ–∑ —ç—Ç–æ–≥–æ –ø–æ–ª—è)
        async with db.execute("PRAGMA table_info(builds)") as cursor:
            columns = await cursor.fetchall()
            column_names = [col[1] for col in columns]
        
        if "planner_link" in column_names:
            print("üìù –£–¥–∞–ª–µ–Ω–∏–µ —É—Å—Ç–∞—Ä–µ–≤—à–µ–≥–æ –ø–æ–ª—è planner_link –∏–∑ —Ç–∞–±–ª–∏—Ü—ã builds...")
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É –±–µ–∑ planner_link
            await db.execute("""
                CREATE TABLE builds_new (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    weapon_id INTEGER NOT NULL,
                    category TEXT NOT NULL,
                    name_ru TEXT,
                    name_en TEXT,
                    quest_name_ru TEXT,
                    quest_name_en TEXT,
                    total_cost INTEGER DEFAULT 0,
                    min_loyalty_level INTEGER DEFAULT 1,
                    modules TEXT,
                    FOREIGN KEY (weapon_id) REFERENCES weapons (id)
                )
            """)
            
            # –ö–æ–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ (–±–µ–∑ planner_link)
            await db.execute("""
                INSERT INTO builds_new 
                (id, weapon_id, category, name_ru, name_en, quest_name_ru, quest_name_en, 
                 total_cost, min_loyalty_level, modules)
                SELECT id, weapon_id, category, name_ru, name_en, quest_name_ru, quest_name_en,
                       total_cost, min_loyalty_level, modules
                FROM builds
            """)
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é —Ç–∞–±–ª–∏—Ü—É –∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –Ω–æ–≤—É—é
            await db.execute("DROP TABLE builds")
            await db.execute("ALTER TABLE builds_new RENAME TO builds")
            
            migrations_applied.append("—É–¥–∞–ª–µ–Ω–∏–µ planner_link –∏–∑ builds")
        
        # –ú–∏–≥—Ä–∞—Ü–∏—è 7: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã traders –¥–ª—è –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
        async with db.execute("PRAGMA table_info(traders)") as cursor:
            columns = await cursor.fetchall()
            column_names = [col[1] for col in columns]
        
        if "name_ru" not in column_names:
            print("üìù –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ –≤ —Ç–∞–±–ª–∏—Ü—É traders...")
            await db.execute("ALTER TABLE traders ADD COLUMN name_ru TEXT")
            await db.execute("ALTER TABLE traders ADD COLUMN name_en TEXT")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏
            await db.execute("UPDATE traders SET name_ru = name, name_en = name")
            
            migrations_applied.append("–ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è traders")
        
        await db.commit()
        
        if migrations_applied:
            print("\n‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            print("   –ü—Ä–∏–º–µ–Ω–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏:")
            for migration in migrations_applied:
                print(f"   - {migration}")
        else:
            print("‚úÖ –í—Å–µ –º–∏–≥—Ä–∞—Ü–∏–∏ —É–∂–µ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã. –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∞–∫—Ç—É–∞–ª—å–Ω–∞.")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    print("=" * 60)
    print("  EFT Helper - –ú–∏–≥—Ä–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
    print("=" * 60)
    print()
    
    try:
        await migrate_database()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
        import traceback
        traceback.print_exc()
    
    print()
    print("=" * 60)
    input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...")


if __name__ == "__main__":
    asyncio.run(main())
