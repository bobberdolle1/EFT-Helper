"""–ó–∞–≥—Ä—É–∑–∫–∞ –º–µ—Ç–∞-—Å–±–æ—Ä–æ–∫ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö."""
import asyncio
import aiosqlite
import json
import sys
import os

# Add parent directory to path
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from database.meta_builds_data import META_BUILDS
from database import BuildCategory


async def find_weapon_id(conn, weapon_name: str):
    """–ù–∞–π—Ç–∏ ID –æ—Ä—É–∂–∏—è –ø–æ –∏–º–µ–Ω–∏."""
    # –ü—Ä–æ–±—É–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
    async with conn.execute(
        "SELECT id FROM weapons WHERE name_en = ? OR name_ru = ?",
        (weapon_name, weapon_name)
    ) as cursor:
        result = await cursor.fetchone()
        if result:
            return result[0]
    
    # –ü—Ä–æ–±—É–µ–º —á–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
    search_pattern = f"%{weapon_name}%"
    async with conn.execute(
        "SELECT id FROM weapons WHERE name_en LIKE ? OR name_ru LIKE ? LIMIT 1",
        (search_pattern, search_pattern)
    ) as cursor:
        result = await cursor.fetchone()
        if result:
            return result[0]
    
    return None


async def load_meta_builds():
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å –º–µ—Ç–∞-—Å–±–æ—Ä–∫–∏ –≤ –ë–î."""
    db_path = os.path.join(os.path.dirname(os.path.dirname(__file__)), "data", "eft_helper.db")
    
    print("=" * 60)
    print("  –ó–∞–≥—Ä—É–∑–∫–∞ –º–µ—Ç–∞-—Å–±–æ—Ä–æ–∫ –≤ –ë–î")
    print("=" * 60)
    print()
    
    async with aiosqlite.connect(db_path) as db:
        added = 0
        skipped = 0
        
        for weapon_name, builds in META_BUILDS.items():
            # –ù–∞–π—Ç–∏ ID –æ—Ä—É–∂–∏—è
            weapon_id = await find_weapon_id(db, weapon_name)
            
            if not weapon_id:
                print(f"  ‚ö†Ô∏è  –û—Ä—É–∂–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: {weapon_name}")
                skipped += len(builds)
                continue
            
            for build_type, build_data in builds.items():
                name_ru = build_data.get("name_ru")
                name_en = build_data.get("name_en")
                description_ru = build_data.get("description_ru", "")
                description_en = build_data.get("description_en", "")
                parts = build_data.get("parts", [])
                cost = build_data.get("estimated_cost", 0)
                min_loyalty = build_data.get("min_loyalty", 1)
                
                # –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é
                if build_type == "meta":
                    category = BuildCategory.META.value
                elif build_type == "budget":
                    category = BuildCategory.RANDOM.value  # –ò—Å–ø–æ–ª—å–∑—É–µ–º RANDOM –¥–ª—è –±—é–¥–∂–µ—Ç–Ω—ã—Ö
                else:
                    category = BuildCategory.META.value
                
                # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —á–∞—Å—Ç–∏ –∫–∞–∫ JSON (–ø–æ–∫–∞ –±–µ–∑ –ø—Ä–∏–≤—è–∑–∫–∏ –∫ –º–æ–¥—É–ª—è–º)
                modules_json = json.dumps([])  # –ü—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤, —Ç.–∫. –Ω–µ—Ç ID –º–æ–¥—É–ª–µ–π
                
                # –î–æ–±–∞–≤–∏—Ç—å —Å–±–æ—Ä–∫—É
                await db.execute(
                    """INSERT INTO builds 
                    (weapon_id, category, name_ru, name_en, total_cost, min_loyalty_level, modules, planner_link)
                    VALUES (?, ?, ?, ?, ?, ?, ?, ?)""",
                    (weapon_id, category, name_ru, name_en, cost, min_loyalty, modules_json, None)
                )
                
                added += 1
                print(f"  ‚úÖ {weapon_name}: {name_ru}")
        
        await db.commit()
        
        print()
        print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"   ‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–æ —Å–±–æ—Ä–æ–∫: {added}")
        print(f"   ‚Ä¢ –ü—Ä–æ–ø—É—â–µ–Ω–æ: {skipped}")
        print()
        print("=" * 60)


if __name__ == "__main__":
    asyncio.run(load_meta_builds())
