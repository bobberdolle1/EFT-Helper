"""–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å–±–æ—Ä–æ–∫ —Å —Ä–∞—Å—á–µ—Ç–æ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫."""
import asyncio
import aiosqlite
import json
import sys
import os

# Add parent directory to path
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from utils.builds_fetcher import BuildsFetcher
from utils.build_calculator import BuildCalculator
from database import BuildCategory


async def find_or_create_weapon(conn, weapon_name: str):
    """–ù–∞–π—Ç–∏ –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –æ—Ä—É–∂–∏–µ –≤ –ë–î."""
    # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏
    async with conn.execute(
        "SELECT id FROM weapons WHERE name_en LIKE ? OR name_ru LIKE ? LIMIT 1",
        (f"%{weapon_name}%", f"%{weapon_name}%")
    ) as cursor:
        result = await cursor.fetchone()
        if result:
            return result[0]
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ (–±–∞–∑–æ–≤–∞—è –∑–∞–ø–∏—Å—å)
    await conn.execute(
        "INSERT INTO weapons (name_en, name_ru, category, tier_rating, base_price) VALUES (?, ?, ?, ?, ?)",
        (weapon_name, weapon_name, "unknown", "B", 0)
    )
    await conn.commit()
    
    # –ü–æ–ª—É—á–∞–µ–º ID
    async with conn.execute("SELECT last_insert_rowid()") as cursor:
        result = await cursor.fetchone()
        return result[0] if result else None


async def sync_builds_from_sources():
    """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å–±–æ—Ä–æ–∫ –∏–∑ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤."""
    db_path = os.path.join(os.path.dirname(os.path.dirname(__file__)), "data", "eft_helper.db")
    
    print("=" * 60)
    print("  –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å–±–æ—Ä–æ–∫")
    print("=" * 60)
    print()
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–±–æ—Ä–∫–∏
    fetcher = BuildsFetcher()
    
    try:
        builds = await fetcher.fetch_all_builds()
        
        if not builds:
            print("‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–±–æ—Ä–∫–∏")
            return
        
        print(f"\nüì¶ –û–±—Ä–∞–±–æ—Ç–∫–∞ {len(builds)} —Å–±–æ—Ä–æ–∫...")
        print()
        
        async with aiosqlite.connect(db_path) as db:
            added = 0
            updated = 0
            skipped = 0
            
            for build in builds:
                try:
                    weapon_name = build.get('weapon_name', 'Unknown')
                    build_name = build.get('build_name', 'Unnamed')
                    
                    # –ù–∞–π—Ç–∏ –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –æ—Ä—É–∂–∏–µ
                    weapon_id = await find_or_create_weapon(db, weapon_name)
                    
                    if not weapon_id:
                        print(f"  ‚ö†Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ: {weapon_name}")
                        skipped += 1
                        continue
                    
                    # –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
                    stats = build.get('stats', {})
                    parts = build.get('parts', [])
                    
                    # –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø—Ä–∏–º–µ—Ä–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å
                    estimated_cost = len(parts) * 15000  # –ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
                    
                    # –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é
                    if build.get('official'):
                        category = BuildCategory.META.value  # –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ preset'—ã - –º–µ—Ç–∞
                    else:
                        category = BuildCategory.RANDOM.value
                    
                    # –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ —Å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏
                    description_ru = f"""
üìä –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:
‚Ä¢ –≠—Ä–≥–æ–Ω–æ–º–∏–∫–∞: {stats.get('ergonomics', 'N/A')}
‚Ä¢ –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è –æ—Ç–¥–∞—á–∞: {stats.get('vertical_recoil', 'N/A')}
‚Ä¢ –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –æ—Ç–¥–∞—á–∞: {stats.get('horizontal_recoil', 'N/A')}
‚Ä¢ MOA: {stats.get('moa', 'N/A')}

üîß –ú–æ–¥—É–ª–µ–π: {len(parts)}
"""
                    
                    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è —Å–±–æ—Ä–∫–∞
                    async with db.execute(
                        "SELECT id FROM builds WHERE weapon_id = ? AND name_en = ?",
                        (weapon_id, build_name)
                    ) as cursor:
                        existing = await cursor.fetchone()
                    
                    if existing:
                        # –û–±–Ω–æ–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é
                        await db.execute(
                            """UPDATE builds SET 
                            total_cost = ?, 
                            modules = ?,
                            planner_link = ?
                            WHERE id = ?""",
                            (estimated_cost, json.dumps([]), build.get('url'), existing[0])
                        )
                        updated += 1
                        status = "üîÑ"
                    else:
                        # –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é
                        await db.execute(
                            """INSERT INTO builds 
                            (weapon_id, category, name_ru, name_en, total_cost, min_loyalty_level, modules, planner_link)
                            VALUES (?, ?, ?, ?, ?, ?, ?, ?)""",
                            (weapon_id, category, build_name, build_name, estimated_cost, 2, json.dumps([]), build.get('url'))
                        )
                        added += 1
                        status = "‚úÖ"
                    
                    print(f"  {status} {weapon_name}: {build_name}")
                    
                except Exception as e:
                    print(f"  ‚ùå –û—à–∏–±–∫–∞: {e}")
                    skipped += 1
                    continue
            
            await db.commit()
            
            print()
            print("=" * 60)
            print("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:")
            print(f"   ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: {added}")
            print(f"   üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {updated}")
            print(f"   ‚ö†Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ: {skipped}")
            print(f"   üì¶ –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {len(builds)}")
            print()
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ë–î
            async with db.execute("SELECT COUNT(*) FROM builds") as cursor:
                total_builds = (await cursor.fetchone())[0]
            print(f"üìà –í—Å–µ–≥–æ —Å–±–æ—Ä–æ–∫ –≤ –ë–î: {total_builds}")
            print("=" * 60)
    
    finally:
        await fetcher.close()


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    try:
        await sync_builds_from_sources()
        print("\n‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    asyncio.run(main())
