"""Script to sync weapon and module data from tarkov.dev API."""
import asyncio
import aiosqlite
import sys
import os

# Add parent directory to path
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from utils.tarkov_api import tarkov_api
from database import Database, WeaponCategory


# Map tarkov.dev categories to our internal categories
CATEGORY_MAPPING = {
    "pistol": WeaponCategory.PISTOL,
    "smg": WeaponCategory.SMG,
    "assault-rifle": WeaponCategory.ASSAULT_RIFLE,
    "assault-carbine": WeaponCategory.ASSAULT_RIFLE,
    "marksman-rifle": WeaponCategory.DMR,
    "sniper-rifle": WeaponCategory.SNIPER,
    "shotgun": WeaponCategory.SHOTGUN,
    "machine-gun": WeaponCategory.LMG,
}

# Tier ratings based on community consensus (can be updated)
TIER_RATINGS = {
    # S-Tier weapons
    "M4A1": "S",
    "HK 416A5": "S",
    "SCAR-L": "S",
    "MCX": "S",
    "SVD": "S",
    
    # A-Tier weapons
    "AK-74N": "A",
    "AK-74M": "A",
    "AKM": "A",
    "MP5": "A",
    "MPX": "A",
    "SR-25": "A",
    
    # B-Tier weapons
    "AK-105": "B",
    "SKS": "B",
    "MP-153": "B",
    "Saiga-12": "B",
    "PP-19-01": "B",
    
    # C-Tier weapons
    "Mosin": "C",
    "VPO-215": "C",
    "TOZ-106": "C",
}


async def sync_weapons_from_api(db: Database):
    """Sync weapons from tarkov.dev API to local database."""
    print("üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ä—É–∂–∏—è –∏–∑ tarkov.dev API...")
    
    weapons_data = await tarkov_api.get_all_weapons()
    
    if not weapons_data:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ—Ä—É–∂–∏–µ –∏–∑ API")
        return 0
    
    print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(weapons_data)} –æ—Ä—É–∂–∏–π –∏–∑ API")
    print("   üíæ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")
    
    async with aiosqlite.connect(db.db_path) as conn:
        # Clear existing weapons (optional - comment out to keep existing data)
        # await conn.execute("DELETE FROM weapons")
        
        added_count = 0
        for weapon_data in weapons_data:
            name = weapon_data.get("shortName", weapon_data.get("name", "Unknown"))
            
            # Determine category from types
            category = WeaponCategory.ASSAULT_RIFLE  # Default
            types = weapon_data.get("types", [])
            for weapon_type in types:
                if weapon_type in CATEGORY_MAPPING:
                    category = CATEGORY_MAPPING[weapon_type]
                    break
            
            # Get tier rating
            tier_rating = TIER_RATINGS.get(name, None)
            
            # Get price
            price = weapon_data.get("avg24hPrice", 0) or 0
            
            # For now, use English name for both (we'll need Russian translations later)
            # In production, you'd fetch Russian translations from a localization service
            name_ru = name  # Placeholder
            name_en = name
            
            try:
                await conn.execute(
                    """INSERT OR REPLACE INTO weapons 
                    (name_ru, name_en, category, tier_rating, base_price) 
                    VALUES (?, ?, ?, ?, ?)""",
                    (name_ru, name_en, category.value, tier_rating, price)
                )
                added_count += 1
            except Exception as e:
                print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞: {name} - {e}")
        
        await conn.commit()
        print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {added_count} –æ—Ä—É–∂–∏–π")
        return added_count


async def sync_attachments_from_api(db: Database):
    """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª–µ–π/–º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–π –∏–∑ tarkov.dev API."""
    print("üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥—É–ª–µ–π –∏–∑ tarkov.dev API...")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥—É–ª–∏ —á–µ—Ä–µ–∑ –±–æ–ª–µ–µ –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
    query = """
    {
        items(limit: 5000, types: mod) {
            id
            name
            shortName
            avg24hPrice
            types
        }
    }
    """
    
    try:
        data = await tarkov_api._make_graphql_request(query)
        all_items = data.get("items", []) if data else []
        
        # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –ø–æ–ø—Ä–æ–±—É–µ–º –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞ —Ç–∏–ø–∞
        if not all_items:
            print("   –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥...")
            query2 = """
            {
                items(limit: 3000) {
                    id
                    name
                    shortName
                    avg24hPrice
                    types
                }
            }
            """
            data = await tarkov_api._make_graphql_request(query2)
            if data and "items" in data:
                # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –º–æ–¥—ã
                all_items = [
                    item for item in data["items"]
                    if any(t in ["mods", "suppressor", "sight", "scope", "stock", "grip", "magazine"] 
                           for t in item.get("types", []))
                ]
    except Exception as e:
        print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        all_items = []
    
    if not all_items:
        print("‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥—É–ª–∏")
        return 0
    
    print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(all_items)} –º–æ–¥—É–ª–µ–π")
    print("   üíæ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –±–∞–∑—É...")
    
    import aiosqlite
    
    async with aiosqlite.connect(db.db_path) as conn:
        added_count = 0
        seen_ids = set()  # Avoid duplicates
        
        for item in all_items:
            item_id = item.get("id")
            if item_id in seen_ids:
                continue
            seen_ids.add(item_id)
            name = item.get("shortName", item.get("name", "Unknown"))
            price = item.get("avg24hPrice", 0) or 0
            
            # –ü—Ä–æ—Å—Ç–æ–π –º–∞–ø–ø–∏–Ω–≥ - –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å
            slot_type = "universal"
            if "sight" in name.lower() or "scope" in name.lower():
                slot_type = "sight"
            elif "stock" in name.lower() or "–ø—Ä–∏–∫–ª–∞–¥" in name.lower():
                slot_type = "stock"
            elif "grip" in name.lower() or "—Ä—É–∫–æ—è—Ç" in name.lower():
                slot_type = "grip"
            elif "suppressor" in name.lower() or "–≥–ª—É—à–∏—Ç–µ–ª" in name.lower():
                slot_type = "muzzle"
            elif "handguard" in name.lower() or "—Ü–µ–≤—å–µ" in name.lower():
                slot_type = "handguard"
            
            try:
                await conn.execute(
                    """INSERT OR REPLACE INTO modules 
                    (name_ru, name_en, price, trader, loyalty_level, slot_type) 
                    VALUES (?, ?, ?, ?, ?, ?)""",
                    (name, name, price, "Mechanic", 2, slot_type)
                )
                added_count += 1
            except Exception as e:
                pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
        
        await conn.commit()
        print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {added_count} –º–æ–¥—É–ª–µ–π")
        return added_count


async def sync_traders_from_api(db: Database):
    """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤—Ü–µ–≤ –∏–∑ tarkov.dev API."""
    print("üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ—Ä–≥–æ–≤—Ü–µ–≤ –∏–∑ tarkov.dev API...")
    
    traders_data = await tarkov_api.get_traders()
    
    if not traders_data:
        print("‚ùå Failed to fetch traders from API")
        return 0
    
    print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(traders_data)} —Ç–æ—Ä–≥–æ–≤—Ü–µ–≤")
    
    trader_emojis = {
        "prapor": "üî´",
        "therapist": "üíä",
        "fence": "üóëÔ∏è",
        "skier": "üíº",
        "peacekeeper": "ü§ù",
        "mechanic": "üîß",
        "ragman": "üëï",
        "jaeger": "üå≤"
    }
    
    async with aiosqlite.connect(db.db_path) as conn:
        added_count = 0
        for trader_data in traders_data:
            name = trader_data.get("name", "Unknown")
            normalized_name = trader_data.get("normalizedName", name.lower())
            emoji = trader_emojis.get(normalized_name, "üíº")
            
            try:
                await conn.execute(
                    "INSERT OR IGNORE INTO traders (name, emoji) VALUES (?, ?)",
                    (name, emoji)
                )
                added_count += 1
            except Exception as e:
                print(f"‚ö†Ô∏è  Error adding trader {name}: {e}")
        
        await conn.commit()
        print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {added_count} —Ç–æ—Ä–≥–æ–≤—Ü–µ–≤")
        return added_count


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏."""
    print("=" * 60)
    print("  EFT Helper - –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å tarkov.dev API")
    print("=" * 60)
    
    db_path = os.path.join(os.path.dirname(os.path.dirname(__file__)), "data", "eft_helper.db")
    db = Database(db_path)
    await db.init_db()
    
    print("\nüìä –ù–∞—á–∞–ª–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏...\n")
    
    traders_count = 0
    weapons_count = 0
    modules_count = 0
    
    # 1. –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤—Ü–µ–≤
    print("üë• –®–∞–≥ 1/3: –¢–æ—Ä–≥–æ–≤—Ü—ã")
    traders_count = await sync_traders_from_api(db) or 0
    
    print()
    
    # 2. –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ—Ä—É–∂–∏—è
    print("üî´ –®–∞–≥ 2/3: –û—Ä—É–∂–∏–µ")
    weapons_count = await sync_weapons_from_api(db) or 0
    
    print()
    
    # 3. –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª–µ–π
    print("üîß –®–∞–≥ 3/3: –ú–æ–¥—É–ª–∏/–ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏")
    modules_count = await sync_attachments_from_api(db) or 0
    
    print("\n" + "=" * 60)
    print("‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print("=" * 60)
    
    print("\nüìä –ò—Ç–æ–≥–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ:")
    print(f"   ‚Ä¢ –¢–æ—Ä–≥–æ–≤—Ü—ã: {traders_count}")
    print(f"   ‚Ä¢ –û—Ä—É–∂–∏–µ: {weapons_count}")
    print(f"   ‚Ä¢ –ú–æ–¥—É–ª–∏: {modules_count}")
    
    print("\nüí° –ü—Ä–∏–º–µ—á–∞–Ω–∏—è:")
    print("   ‚Ä¢ –†—É—Å—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –ø–æ–∑–¥–Ω–µ–µ")
    print("   ‚Ä¢ –°–±–æ—Ä–∫–∏ –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å –≤—Ä—É—á–Ω—É—é –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å populate_db.py")
    print("   ‚Ä¢ –î–∞–Ω–Ω—ã–µ –∫—ç—à–∏—Ä—É—é—Ç—Å—è –Ω–∞ 24 —á–∞—Å–∞")
    print("\n" + "=" * 60)


if __name__ == "__main__":
    asyncio.run(main())
