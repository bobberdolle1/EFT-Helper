"""Test quest build optimization algorithm."""
import asyncio
import sys
import os

sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from api_clients import TarkovAPIClient
from services.quest_build_service import QuestBuildService

async def test():
    """Test quest build optimization."""
    api = TarkovAPIClient()
    service = QuestBuildService(api)
    
    try:
        print("=" * 70)
        print("–¢–µ—Å—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∫–≤–µ—Å—Ç–æ–≤–æ–π —Å–±–æ—Ä–∫–∏")
        print("=" * 70)
        
        # Get quest tasks
        print("\n1. –ó–∞–≥—Ä—É–∑–∫–∞ –∫–≤–µ—Å—Ç–æ–≤...")
        tasks = await api.get_weapon_build_tasks(lang="ru")
        
        # Test on Gunsmith Part 1 (simpler requirements)
        target_quest = None
        for task in tasks:
            if "–ß–∞—Å—Ç—å 1" in task.get('name', ''):
                target_quest = task
                break
        
        if not target_quest:
            # Fallback to first quest
            target_quest = tasks[0]
        
        quest_name = target_quest.get('name')
        print(f"\n2. –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–≤–µ—Å—Ç: {quest_name}")
        
        # Get buildWeapon objective
        objectives = target_quest.get('objectives', [])
        build_obj = None
        for obj in objectives:
            if obj.get('type') == 'buildWeapon':
                build_obj = obj
                break
        
        if not build_obj:
            print("‚ùå –ù–µ—Ç buildWeapon objective!")
            return
        
        # Parse requirements
        print("\n3. –ü–∞—Ä—Å–∏–Ω–≥ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π...")
        requirements = service.parse_quest_requirements(build_obj)
        
        if not requirements:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è!")
            return
        
        print(f"\n   –û—Ä—É–∂–∏–µ: {requirements.weapon_name}")
        print(f"   –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:")
        for req in requirements.requirements:
            if req.value == 0 and req.compare_method == '>=':
                continue
            print(f"     ‚Ä¢ {req.name} {req.compare_method} {req.value}")
        
        # Generate optimized build
        print("\n4. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–±–æ—Ä–∫–∏...")
        build = await service.generate_quest_build(requirements, "ru")
        
        if not build:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–±–æ—Ä–∫—É!")
            return
        
        # Display results
        print("\n" + "=" * 70)
        print("–†–ï–ó–£–õ–¨–¢–ê–¢ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò")
        print("=" * 70)
        
        weapon = build['weapon']
        modules = build.get('modules', [])
        stats = build['stats']
        meets_req = build['meets_requirements']
        
        print(f"\nüî´ –û—Ä—É–∂–∏–µ: {weapon.get('name')}")
        print(f"   –ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞: {weapon.get('avg24hPrice', 0):,}‚ÇΩ")
        
        if modules:
            print(f"\nüîß –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –º–æ–¥—É–ª–µ–π: {len(modules)}")
            for i, mod in enumerate(modules[:15], 1):
                mod_name = mod.get('name', 'Unknown')
                mod_price = mod.get('price', 0)
                mod_slot = mod.get('slot')
                
                slot_info = f" ({mod_slot})" if mod_slot else ""
                print(f"   {i}. {mod_name}{slot_info}")
                print(f"      –¶–µ–Ω–∞: {mod_price:,}‚ÇΩ")
                
                # Show bonuses if available
                if mod.get('ergonomics'):
                    print(f"      –≠—Ä–≥–æ–Ω–æ–º–∏–∫–∞: {mod['ergonomics']:+}")
                if mod.get('recoilModifier'):
                    print(f"      –û—Ç–¥–∞—á–∞: {mod['recoilModifier']:+}%")
            
            if len(modules) > 15:
                print(f"   ... –∏ –µ—â—ë {len(modules) - 15} –º–æ–¥—É–ª–µ–π")
        
        print(f"\nüìä –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –ø–æ—Å–ª–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:")
        
        # Check each requirement
        for req in requirements.requirements:
            if req.value == 0 and req.compare_method == '>=':
                continue
            
            stat_value = stats.get(req.name, 0)
            is_met = service._check_single_requirement(stat_value, req)
            status = "‚úÖ" if is_met else "‚ùå"
            
            print(f"   {status} {req.name}: {stat_value:.1f} ({req.compare_method} {req.value})")
        
        print(f"\nüí∞ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {build['total_cost']:,}‚ÇΩ")
        
        if meets_req:
            print("\n‚úÖ –í–°–ï –¢–†–ï–ë–û–í–ê–ù–ò–Ø –ö–í–ï–°–¢–ê –í–´–ü–û–õ–ù–ï–ù–´!")
        else:
            print("\n‚ö†Ô∏è –ù–µ –≤—Å–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã")
            print("   –í–æ–∑–º–æ–∂–Ω–æ, —Ç—Ä–µ–±—É—é—Ç—Å—è –º–æ–¥—É–ª–∏ –∏–∑ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤")
        
        print("\n" + "=" * 70)
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
    finally:
        await api.close()

if __name__ == "__main__":
    asyncio.run(test())
