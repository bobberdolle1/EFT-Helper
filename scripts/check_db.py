"""–°–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
import asyncio
import aiosqlite
import sys
import os

# Add parent directory to path
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))


async def check_database():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
    import os
    db_path = os.path.join(os.path.dirname(os.path.dirname(__file__)), "data", "eft_helper.db")
    
    print("=" * 60)
    print("  –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö EFT Helper")
    print("=" * 60)
    print()
    
    try:
        async with aiosqlite.connect(db_path) as db:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü
            async with db.execute(
                "SELECT name FROM sqlite_master WHERE type='table'"
            ) as cursor:
                tables = await cursor.fetchall()
            
            print("üìä –¢–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:")
            for table in tables:
                print(f"   - {table[0]}")
            print()
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∫–∞–∂–¥–æ–π —Ç–∞–±–ª–∏—Ü—ã
            print("üìà –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π:")
            
            # –û—Ä—É–∂–∏–µ
            async with db.execute("SELECT COUNT(*) FROM weapons") as cursor:
                weapons_count = (await cursor.fetchone())[0]
            print(f"   üî´ –û—Ä—É–∂–∏–µ: {weapons_count}")
            
            if weapons_count > 0:
                async with db.execute("SELECT name_ru, category FROM weapons LIMIT 5") as cursor:
                    weapons = await cursor.fetchall()
                print("      –ü—Ä–∏–º–µ—Ä—ã:")
                for weapon in weapons:
                    print(f"        ‚Ä¢ {weapon[0]} ({weapon[1]})")
            
            # –ú–æ–¥—É–ª–∏
            async with db.execute("SELECT COUNT(*) FROM modules") as cursor:
                modules_count = (await cursor.fetchone())[0]
            print(f"\n   üîß –ú–æ–¥—É–ª–∏: {modules_count}")
            
            # –°–±–æ—Ä–∫–∏
            async with db.execute("SELECT COUNT(*) FROM builds") as cursor:
                builds_count = (await cursor.fetchone())[0]
            print(f"   üì¶ –°–±–æ—Ä–∫–∏: {builds_count}")
            
            if builds_count > 0:
                async with db.execute(
                    "SELECT b.id, w.name_ru, b.category FROM builds b "
                    "JOIN weapons w ON b.weapon_id = w.id LIMIT 5"
                ) as cursor:
                    builds = await cursor.fetchall()
                print("      –ü—Ä–∏–º–µ—Ä—ã —Å–±–æ—Ä–æ–∫:")
                for build in builds:
                    print(f"        ‚Ä¢ {build[1]} - {build[2]}")
            
            # –¢–æ—Ä–≥–æ–≤—Ü—ã
            async with db.execute("SELECT COUNT(*) FROM traders") as cursor:
                traders_count = (await cursor.fetchone())[0]
            print(f"\n   ü§ù –¢–æ—Ä–≥–æ–≤—Ü—ã: {traders_count}")
            
            if traders_count > 0:
                async with db.execute("SELECT name FROM traders") as cursor:
                    traders = await cursor.fetchall()
                print("      –°–ø–∏—Å–æ–∫:")
                for trader in traders:
                    print(f"        ‚Ä¢ {trader[0]}")
            
            # –ö–≤–µ—Å—Ç—ã
            async with db.execute("SELECT COUNT(*) FROM quests") as cursor:
                quests_count = (await cursor.fetchone())[0]
            print(f"\n   üìú –ö–≤–µ—Å—Ç—ã: {quests_count}")
            
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
            async with db.execute("SELECT COUNT(*) FROM users") as cursor:
                users_count = (await cursor.fetchone())[0]
            print(f"   üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {users_count}")
            
            print()
            print("=" * 60)
            
            # –ò—Ç–æ–≥
            if weapons_count == 0 or traders_count == 0:
                print("‚ö†Ô∏è  –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞!")
                print("   –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python populate_db.py")
            else:
                print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ –∏ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!")
            
            print("=" * 60)
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        import traceback
        traceback.print_exc()


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    await check_database()
    input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...")


if __name__ == "__main__":
    asyncio.run(main())
