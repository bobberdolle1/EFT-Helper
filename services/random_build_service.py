"""Service for generating truly random weapon builds with compatibility checks."""
import logging
import random
from typing import List, Dict, Optional, Tuple
from api_clients import TarkovAPIClient

logger = logging.getLogger(__name__)


class RandomBuildService:
    """
    –°–µ—Ä–≤–∏—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω—ã—Ö —Å–±–æ—Ä–æ–∫ –æ—Ä—É–∂–∏—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏.
    
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ä–∞–Ω–¥–æ–º–Ω—ã–µ —Å–±–æ—Ä–∫–∏, –≥–¥–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–ª–æ—Ç–∞ –æ—Ä—É–∂–∏—è
    –≤—ã–±–∏—Ä–∞–µ—Ç—Å—è —Å–ª—É—á–∞–π–Ω—ã–π —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π –º–æ–¥—É–ª—å –∏–∑ —Å–ø–∏—Å–∫–∞ allowedItems.
    """
    
    def __init__(self, api_client: TarkovAPIClient):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞.
        
        Args:
            api_client: –ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Tarkov API
        """
        self.api = api_client
    
    async def generate_random_build(self, weapon_id: str) -> Optional[Dict]:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω—É—é —Å–±–æ—Ä–∫—É –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –æ—Ä—É–∂–∏—è.
        
        Args:
            weapon_id: ID –æ—Ä—É–∂–∏—è –∏–∑ Tarkov API
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–±–æ—Ä–∫–µ:
            {
                "weapon": {...},  # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—Ä—É–∂–∏–∏
                "mods": [...]     # –°–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –º–æ–¥—É–ª–µ–π
            }
        """
        # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ä—É–∂–∏–∏ —Å–æ —Å–ª–æ—Ç–∞–º–∏
        weapon_data = await self.api.get_weapon_details(weapon_id)
        
        if not weapon_data:
            logger.error(f"Failed to get weapon details for {weapon_id}")
            return None
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —É –æ—Ä—É–∂–∏—è –µ—Å—Ç—å —Å–ª–æ—Ç—ã
        properties = weapon_data.get("properties")
        if not properties or not isinstance(properties, dict):
            logger.warning(f"Weapon {weapon_id} has no properties")
            return {
                "weapon": weapon_data,
                "mods": []
            }
        
        slots = properties.get("slots", [])
        if not slots:
            logger.info(f"Weapon {weapon_id} has no modification slots")
            return {
                "weapon": weapon_data,
                "mods": []
            }
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –º–æ–¥—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–ª–æ—Ç–∞
        selected_mods = []
        
        for slot in slots:
            # –ü—ã—Ç–∞–µ–º—Å—è –≤—ã–±—Ä–∞—Ç—å –º–æ–¥ –¥–ª—è —ç—Ç–æ–≥–æ —Å–ª–æ—Ç–∞
            mod = self._select_random_mod_for_slot(slot)
            if mod:
                selected_mods.append({
                    "slot_name": slot.get("name", "Unknown"),
                    "slot_id": slot.get("id", ""),
                    "mod": mod
                })
        
        logger.info(f"Generated random build for {weapon_id} with {len(selected_mods)} mods")
        
        return {
            "weapon": weapon_data,
            "mods": selected_mods
        }
    
    def _select_random_mod_for_slot(self, slot: Dict) -> Optional[Dict]:
        """
        –í—ã–±–∏—Ä–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π –º–æ–¥ –¥–ª—è —Å–ª–æ—Ç–∞.
        
        Args:
            slot: –î–∞–Ω–Ω—ã–µ —Å–ª–æ—Ç–∞ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            
        Returns:
            –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –º–æ–¥–µ –∏–ª–∏ None
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–ª–æ—Ç–∞
        is_required = slot.get("required", False)
        
        # –î–ª—è –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é 30% –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        if not is_required and random.random() < 0.3:
            return None
        
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã —Å–ª–æ—Ç–∞
        filters = slot.get("filters")
        if not filters or not isinstance(filters, dict):
            return None
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –∏ –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã
        allowed_items = filters.get("allowedItems", [])
        excluded_items = filters.get("excludedItems", [])
        
        if not allowed_items:
            return None
        
        # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ ID –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤
        excluded_items_ids = {item.get("id") for item in excluded_items if isinstance(item, dict)}
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã
        all_allowed_items = []
        for item in allowed_items:
            if isinstance(item, dict) and item.get("id") not in excluded_items_ids:
                all_allowed_items.append(item)
        
        if not all_allowed_items:
            return None
        
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –º–æ–¥ –∏–∑ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö
        selected_mod = random.choice(all_allowed_items)
        
        return selected_mod
    
    async def generate_random_build_for_random_weapon(self, lang: str = "en") -> Optional[Dict]:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω—É—é —Å–±–æ—Ä–∫—É –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –æ—Ä—É–∂–∏—è.
        
        Args:
            lang: Language code ("ru" or "en")
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–±–æ—Ä–∫–µ –∏–ª–∏ None
        """
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –æ—Ä—É–∂–∏–π —Å –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–µ–π
        try:
            weapons = await self.api.get_all_weapons(lang=lang)
            logger.info(f"API returned {len(weapons) if weapons else 0} weapons for lang={lang}")
        except Exception as e:
            logger.error(f"Failed to fetch weapons from API: {e}", exc_info=True)
            return None
        
        if not weapons:
            logger.error(f"No weapons available for random build generation (API returned empty list for lang={lang})")
            return None
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω–æ–µ –æ—Ä—É–∂–∏–µ (–Ω–µ –≥—Ä–∞–Ω–∞—Ç–æ–º–µ—Ç—ã, —Å–∏–≥–Ω–∞–ª—å–Ω—ã–µ –ø–∏—Å—Ç–æ–ª–µ—Ç—ã –∏ —Ç.–¥.)
        # –û—Ä—É–∂–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º—ã–º
        suitable_weapons = []
        for weapon in weapons:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –æ—Ä—É–∂–∏–µ (—Ç–∏–ø gun)
            types = weapon.get("types", [])
            if "gun" not in types:
                continue
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö
            suitable_weapons.append(weapon)
        
        if not suitable_weapons:
            logger.error("No suitable weapons found for random build")
            return None
        
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –æ—Ä—É–∂–∏–µ
        selected_weapon = random.choice(suitable_weapons)
        weapon_id = selected_weapon.get("id")
        
        if not weapon_id:
            logger.error("Selected weapon has no ID")
            return None
        
        logger.info(f"Selected random weapon: {selected_weapon.get('name', 'Unknown')} ({weapon_id})")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–±–æ—Ä–∫—É –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –æ—Ä—É–∂–∏—è
        build_result = await self.generate_random_build(weapon_id)
        
        return build_result
    
    def format_build_info(
        self, 
        build_data: Dict, 
        language: str = "ru"
    ) -> Tuple[str, int]:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–±–æ—Ä–∫–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –ø–æ–ª–Ω—ã–º–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏.
        
        Args:
            build_data: –î–∞–Ω–Ω—ã–µ —Å–±–æ—Ä–∫–∏ –∏–∑ generate_random_build
            language: –Ø–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
            
        Returns:
            –ö–æ—Ä—Ç–µ–∂ (—Ç–µ–∫—Å—Ç —Å–±–æ—Ä–∫–∏, –æ–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å)
        """
        weapon = build_data.get("weapon", {})
        mods = build_data.get("mods", [])
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        weapon_name = weapon.get("name", "Unknown Weapon")
        text = f"üî´ **{weapon_name}**\n"
        text += f"üì¶ *{weapon.get('shortName', '')}*\n\n"
        
        # –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –æ—Ä—É–∂–∏—è
        properties = weapon.get("properties", {})
        if properties:
            text += "üìä **–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:**\n" if language == "ru" else "üìä **Stats:**\n"
            
            if "caliber" in properties and properties["caliber"]:
                text += f"  ‚Ä¢ –ö–∞–ª–∏–±—Ä: {properties['caliber']}\n" if language == "ru" else f"  ‚Ä¢ Caliber: {properties['caliber']}\n"
            
            if "ergonomics" in properties and properties["ergonomics"]:
                text += f"  ‚Ä¢ –≠—Ä–≥–æ–Ω–æ–º–∏–∫–∞: {properties['ergonomics']}\n" if language == "ru" else f"  ‚Ä¢ Ergonomics: {properties['ergonomics']}\n"
            
            if "recoilVertical" in properties and properties["recoilVertical"]:
                text += f"  ‚Ä¢ –û—Ç–¥–∞—á–∞ (–≤–µ—Ä—Ç): {properties['recoilVertical']}\n" if language == "ru" else f"  ‚Ä¢ Recoil (vert): {properties['recoilVertical']}\n"
            
            if "recoilHorizontal" in properties and properties["recoilHorizontal"]:
                text += f"  ‚Ä¢ –û—Ç–¥–∞—á–∞ (–≥–æ—Ä): {properties['recoilHorizontal']}\n" if language == "ru" else f"  ‚Ä¢ Recoil (hor): {properties['recoilHorizontal']}\n"
            
            if "fireRate" in properties and properties["fireRate"]:
                text += f"  ‚Ä¢ –°–∫–æ—Ä–æ—Å—Ç—Ä–µ–ª—å–Ω–æ—Å—Ç—å: {properties['fireRate']} –≤/–º\n" if language == "ru" else f"  ‚Ä¢ Fire Rate: {properties['fireRate']} RPM\n"
            
            if "velocity" in properties and properties["velocity"]:
                text += f"  ‚Ä¢ –°–∫–æ—Ä–æ—Å—Ç—å –ø—É–ª–∏: {properties['velocity']} –º/—Å\n" if language == "ru" else f"  ‚Ä¢ Velocity: {properties['velocity']} m/s\n"
            
            text += "\n"
        
        # –°–ø–∏—Å–æ–∫ –º–æ–¥—É–ª–µ–π
        if mods:
            text += "üîß **–ú–æ–¥—É–ª–∏:**\n" if language == "ru" else "üîß **Mods:**\n"
            total_cost = 0
            min_loyalty_level = 1
            required_trader = None
            
            for mod_data in mods:
                slot_name = mod_data.get("slot_name", "Unknown Slot")
                mod = mod_data.get("mod", {})
                mod_name = mod.get("shortName") or mod.get("name", "Unknown")
                mod_price = mod.get("avg24hPrice") or 0
                
                # Ensure price is a number
                if mod_price is None:
                    mod_price = 0
                
                total_cost += mod_price
                
                price_text = f"{mod_price:,} ‚ÇΩ".replace(",", " ") if mod_price else "? ‚ÇΩ"
                text += f"  - **{slot_name}**: {mod_name}\n"
            
            text += "\n"
            
            # –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å
            weapon_price = weapon.get("avg24hPrice", 0) or 0
            total_with_weapon = total_cost + weapon_price
            
            text += "üí∞ **–°—Ç–æ–∏–º–æ—Å—Ç—å:**\n" if language == "ru" else "üí∞ **Cost:**\n"
            text += f"  ‚Ä¢ –û—Ä—É–∂–∏–µ: {weapon_price:,} ‚ÇΩ\n".replace(",", " ") if language == "ru" else f"  ‚Ä¢ Weapon: {weapon_price:,} ‚ÇΩ\n".replace(",", " ")
            text += f"  ‚Ä¢ –ú–æ–¥—É–ª–∏: {total_cost:,} ‚ÇΩ\n".replace(",", " ") if language == "ru" else f"  ‚Ä¢ Mods: {total_cost:,} ‚ÇΩ\n".replace(",", " ")
            text += f"  ‚Ä¢ **–ò—Ç–æ–≥–æ: {total_with_weapon:,} ‚ÇΩ**\n".replace(",", " ") if language == "ru" else f"  ‚Ä¢ **Total: {total_with_weapon:,} ‚ÇΩ**\n".replace(",", " ")
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
            if min_loyalty_level > 1:
                text += f"\nüõí **–î–æ—Å—Ç—É–ø–Ω–æ –ø—Ä–∏ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏**: {required_trader} Lvl {min_loyalty_level}\n" if language == "ru" else f"\nüõí **Available at loyalty**: {required_trader} Lvl {min_loyalty_level}\n"
            
            return text, total_with_weapon
        else:
            weapon_price = weapon.get("avg24hPrice", 0) or 0
            text += "‚ÑπÔ∏è –ú–æ–¥—É–ª–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã (–±–∞–∑–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è)\n" if language == "ru" else "‚ÑπÔ∏è No mods installed (base configuration)\n"
            text += f"üí∞ **–°—Ç–æ–∏–º–æ—Å—Ç—å**: {weapon_price:,} ‚ÇΩ\n".replace(",", " ") if language == "ru" else f"üí∞ **Cost**: {weapon_price:,} ‚ÇΩ\n".replace(",", " ")
            return text, weapon_price

