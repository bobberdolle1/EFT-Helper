"""–°–∫—Ä–∏–ø—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π."""
import asyncio
import os
import sys
from dotenv import load_dotenv

# Load environment variables from .env file
load_dotenv()


async def check_env_file():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è BOT_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è."""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN
    bot_token = os.getenv("BOT_TOKEN", "")
    
    if not bot_token or bot_token == "your_telegram_bot_token_here":
        print("‚ùå BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!")
        print("\nüìù –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞:")
        print("   BOT_TOKEN=your_telegram_bot_token_here")
        print("   ADMIN_IDS=123456789")
        print("\n   –ü–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω —É @BotFather –≤ Telegram")
        print("\n   –ü–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ: docker-compose restart")
        return False
    
    print("‚úÖ BOT_TOKEN –Ω–∞–π–¥–µ–Ω")
    return True


async def migrate_database():
    """–ú–∏–≥—Ä–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ö–µ–º—ã."""
    import aiosqlite
    import json
    from utils.constants import DEFAULT_TRADER_LEVELS, DEFAULT_DB_PATH
    
    db_path = DEFAULT_DB_PATH
    
    async with aiosqlite.connect(db_path) as db:
        # –ú–∏–≥—Ä–∞—Ü–∏—è 1: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ trader_levels –≤ users
        async with db.execute("PRAGMA table_info(users)") as cursor:
            columns = await cursor.fetchall()
            column_names = [col[1] for col in columns]
        
        if "trader_levels" not in column_names:
            print("   üìù –ú–∏–≥—Ä–∞—Ü–∏—è: –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ trader_levels...")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∫–æ–ª–æ–Ω–∫—É
            await db.execute("ALTER TABLE users ADD COLUMN trader_levels TEXT")
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            default_trader_levels = json.dumps(DEFAULT_TRADER_LEVELS)
            
            await db.execute(
                "UPDATE users SET trader_levels = ?",
                (default_trader_levels,)
            )
            
            await db.commit()
            print("   ‚úÖ trader_levels –¥–æ–±–∞–≤–ª–µ–Ω")
        
        # –ú–∏–≥—Ä–∞—Ü–∏—è 2: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –æ—Ä—É–∂–∏—è
        async with db.execute("PRAGMA table_info(weapons)") as cursor:
            columns = await cursor.fetchall()
            weapon_columns = [col[1] for col in columns]
        
        weapon_stats_columns = [
            ("caliber", "TEXT"),
            ("ergonomics", "INTEGER"),
            ("recoil_vertical", "INTEGER"),
            ("recoil_horizontal", "INTEGER"),
            ("fire_rate", "INTEGER"),
            ("effective_range", "INTEGER"),
            ("flea_price", "INTEGER")
        ]
        
        migration_needed = False
        for col_name, col_type in weapon_stats_columns:
            if col_name not in weapon_columns:
                if not migration_needed:
                    print("   üìù –ú–∏–≥—Ä–∞—Ü–∏—è: –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –æ—Ä—É–∂–∏—è...")
                    migration_needed = True
                try:
                    await db.execute(f"ALTER TABLE weapons ADD COLUMN {col_name} {col_type}")
                    print(f"   ‚úÖ {col_name} –¥–æ–±–∞–≤–ª–µ–Ω")
                except Exception as e:
                    print(f"   ‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ {col_name}: {e}")
        
        if migration_needed:
            await db.commit()
            print("   ‚úÖ –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –æ—Ä—É–∂–∏—è –¥–æ–±–∞–≤–ª–µ–Ω—ã")
        
        # –ú–∏–≥—Ä–∞—Ü–∏—è 3: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ flea_price –≤ modules
        async with db.execute("PRAGMA table_info(modules)") as cursor:
            columns = await cursor.fetchall()
            module_columns = [col[1] for col in columns]
        
        if "flea_price" not in module_columns:
            print("   üìù –ú–∏–≥—Ä–∞—Ü–∏—è: –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ flea_price –≤ modules...")
            try:
                await db.execute("ALTER TABLE modules ADD COLUMN flea_price INTEGER")
                await db.commit()
                print("   ‚úÖ flea_price –¥–æ–±–∞–≤–ª–µ–Ω –≤ modules")
            except Exception as e:
                print(f"   ‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ flea_price: {e}")


async def init_database():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
    print("\nüóÑÔ∏è  –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    from database import Database
    
    db = Database("data/eft_helper.db")
    await db.init_db()
    
    print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    await migrate_database()
    
    return db


async def check_database_content(db):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ."""
    print("\nüìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    import aiosqlite
    
    async with aiosqlite.connect(db.db_path) as conn:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ—Ä—É–∂–∏—è
        async with conn.execute("SELECT COUNT(*) FROM weapons") as cursor:
            weapons_count = (await cursor.fetchone())[0]
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –º–æ–¥—É–ª–µ–π
        async with conn.execute("SELECT COUNT(*) FROM modules") as cursor:
            modules_count = (await cursor.fetchone())[0]
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Å–±–æ—Ä–æ–∫
        async with conn.execute("SELECT COUNT(*) FROM builds") as cursor:
            builds_count = (await cursor.fetchone())[0]
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–æ—Ä–≥–æ–≤—Ü–µ–≤
        async with conn.execute("SELECT COUNT(*) FROM traders") as cursor:
            traders_count = (await cursor.fetchone())[0]
    
    print(f"   –û—Ä—É–∂–∏–µ: {weapons_count}")
    print(f"   –ú–æ–¥—É–ª–∏: {modules_count}")
    print(f"   –°–±–æ—Ä–∫–∏: {builds_count}")
    print(f"   –¢–æ—Ä–≥–æ–≤—Ü—ã: {traders_count}")
    
    return {
        "weapons": weapons_count,
        "modules": modules_count,
        "builds": builds_count,
        "traders": traders_count
    }


async def populate_sample_data():
    """–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–∑—ã —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏."""
    print("\nüì¶ –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–∑—ã —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏...")
    print("   (–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è)")
    
    try:
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ scripts –≤ sys.path
        scripts_path = os.path.join(os.path.dirname(__file__), 'scripts')
        if scripts_path not in sys.path:
            sys.path.insert(0, scripts_path)
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º populate_db
        import populate_db
        await populate_db.main()
        print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        import traceback
        traceback.print_exc()
        return False


async def load_data_from_api():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ API (–ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ)."""
    import aiohttp
    
    print("\nüì° –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ tarkov.dev API...")
    print("   –≠—Ç–æ –∑–∞–π–º–µ—Ç –æ–∫–æ–ª–æ –º–∏–Ω—É—Ç—ã...\n")
    
    API_URL = "https://api.tarkov.dev/graphql"
    
    query = """
    {
        items(limit: 10000) {
            id
            name
            shortName
            avg24hPrice
            types
            properties {
                ... on ItemPropertiesWeapon {
                    caliber
                    ergonomics
                    recoilVertical
                    recoilHorizontal
                    fireRate
                }
            }
            buyFor {
                vendor {
                    ... on TraderOffer {
                        trader {
                            name
                        }
                        minTraderLevel
                    }
                }
                price
            }
        }
    }
    """
    
    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(API_URL, json={"query": query}, timeout=aiohttp.ClientTimeout(total=60)) as resp:
                if resp.status != 200:
                    print(f"‚ùå API –≤–µ—Ä–Ω—É–ª –∫–æ–¥ {resp.status}")
                    return False
                
                data = await resp.json()
                
                if "errors" in data:
                    print(f"‚ùå –û—à–∏–±–∫–∏ API: {data['errors']}")
                    return False
                
                items = data.get("data", {}).get("items", [])
                print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤: {len(items)}")
                
                if not items:
                    return False
                
                # Separate items
                weapons = []
                mods = []
                
                for item in items:
                    item_types = [t.lower() for t in item.get("types", [])]
                    
                    if "gun" in item_types:
                        weapons.append(item)
                    elif any(mod_type in item_types for mod_type in [
                        "mods", "mod", "suppressor", "sight", "scope", "stock", 
                        "grip", "pistolgrip", "foregrip", "magazine", "handguard", 
                        "mount", "barrel", "gasblock", "charging", "receiver"
                    ]):
                        mods.append(item)
                
                print(f"   –û—Ä—É–∂–∏–µ: {len(weapons)}, –ú–æ–¥—É–ª–∏: {len(mods)}")
                
                # Save to DB
                await save_api_data_to_db(weapons, mods)
                
                return True
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
        return False


async def save_api_data_to_db(weapons, mods):
    """Save API data to database."""
    import aiosqlite
    
    db_path = "data/eft_helper.db"
    
    async with aiosqlite.connect(db_path) as db:
        # Save weapons
        for weapon in weapons:
            try:
                name_en = weapon.get("shortName") or weapon.get("name", "Unknown")
                props = weapon.get("properties") or {}
                
                await db.execute(
                    """INSERT OR REPLACE INTO weapons 
                    (name_ru, name_en, category, base_price, flea_price, caliber, 
                     ergonomics, recoil_vertical, recoil_horizontal, fire_rate) 
                    VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)""",
                    (name_en, name_en, "assault_rifle", weapon.get("avg24hPrice", 0),
                     weapon.get("avg24hPrice"), props.get("caliber"),
                     props.get("ergonomics"), props.get("recoilVertical"),
                     props.get("recoilHorizontal"), props.get("fireRate"))
                )
            except:
                pass
        
        # Save mods
        for mod in mods:
            try:
                name_en = mod.get("shortName") or mod.get("name", "Unknown")
                price = mod.get("avg24hPrice", 0) or 0
                
                trader = "Mechanic"
                trader_price = price
                loyalty_level = 2
                
                buy_for = mod.get("buyFor", [])
                if buy_for:
                    for offer in buy_for:
                        vendor = offer.get("vendor")
                        if vendor and vendor.get("__typename") != "FleaMarket":
                            trader_data = vendor.get("trader")
                            if trader_data:
                                trader = trader_data.get("name", "Mechanic")
                                loyalty_level = vendor.get("minTraderLevel", 2)
                                trader_price = offer.get("price", price)
                                break
                
                # Determine slot type
                name_lower = name_en.lower()
                types_lower = [t.lower() for t in mod.get("types", [])]
                
                if "sight" in name_lower or "scope" in name_lower or "sight" in types_lower:
                    slot_type = "sight"
                elif "stock" in name_lower or "stock" in types_lower:
                    slot_type = "stock"
                elif "grip" in name_lower or "grip" in types_lower:
                    slot_type = "grip"
                elif "suppressor" in name_lower or "suppressor" in types_lower:
                    slot_type = "muzzle"
                elif "magazine" in name_lower or "magazine" in types_lower:
                    slot_type = "magazine"
                elif "handguard" in name_lower or "handguard" in types_lower:
                    slot_type = "handguard"
                elif "barrel" in name_lower or "barrel" in types_lower:
                    slot_type = "barrel"
                else:
                    slot_type = "universal"
                
                await db.execute(
                    """INSERT OR REPLACE INTO modules 
                    (name_ru, name_en, price, trader, loyalty_level, slot_type, flea_price) 
                    VALUES (?, ?, ?, ?, ?, ?, ?)""",
                    (name_en, name_en, trader_price, trader, loyalty_level, slot_type, price)
                )
            except:
                pass
        
        await db.commit()
        print(f"   ‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")


async def update_builds_with_modules():
    """Update builds with actual module IDs from database."""
    import aiosqlite
    import json
    from database.meta_builds_data import META_BUILDS
    
    db_path = "data/eft_helper.db"
    
    async def find_module_by_name(conn, part_name: str) -> int:
        """Try to find module ID by part name."""
        async with conn.execute(
            "SELECT id FROM modules WHERE name_en LIKE ? OR name_ru LIKE ? LIMIT 1",
            (f"%{part_name}%", f"%{part_name}%")
        ) as cursor:
            row = await cursor.fetchone()
            if row:
                return row[0]
        
        words = part_name.split()
        for word in words:
            if len(word) > 3:
                async with conn.execute(
                    "SELECT id FROM modules WHERE name_en LIKE ? OR name_ru LIKE ? LIMIT 1",
                    (f"%{word}%", f"%{word}%")
                ) as cursor:
                    row = await cursor.fetchone()
                    if row:
                        return row[0]
        return None
    
    async with aiosqlite.connect(db_path) as conn:
        for weapon_name, builds in META_BUILDS.items():
            async with conn.execute(
                "SELECT id FROM weapons WHERE name_en LIKE ? OR name_ru LIKE ? LIMIT 1",
                (f"%{weapon_name}%", f"%{weapon_name}%")
            ) as cursor:
                weapon_row = await cursor.fetchone()
            
            if not weapon_row:
                continue
            
            weapon_id = weapon_row[0]
            
            for build_type, build_data in builds.items():
                name_en = build_data.get("name_en", f"{weapon_name} {build_type}")
                parts = build_data.get("parts", [])
                
                async with conn.execute(
                    "SELECT id, modules FROM builds WHERE weapon_id = ? AND name_en = ?",
                    (weapon_id, name_en)
                ) as cursor:
                    build_row = await cursor.fetchone()
                
                if not build_row:
                    continue
                
                build_id = build_row[0]
                current_modules = json.loads(build_row[1]) if build_row[1] else []
                
                if current_modules:
                    continue
                
                module_ids = []
                for part_name in parts:
                    module_id = await find_module_by_name(conn, part_name)
                    if module_id:
                        module_ids.append(module_id)
                
                if module_ids:
                    total_cost = 0
                    max_loyalty = 1
                    
                    for module_id in module_ids:
                        async with conn.execute(
                            "SELECT price, loyalty_level FROM modules WHERE id = ?",
                            (module_id,)
                        ) as cursor:
                            mod_row = await cursor.fetchone()
                            if mod_row:
                                total_cost += mod_row[0]
                                max_loyalty = max(max_loyalty, mod_row[1])
                    
                    await conn.execute(
                        "UPDATE builds SET modules = ?, total_cost = ?, min_loyalty_level = ? WHERE id = ?",
                        (json.dumps(module_ids), total_cost, max_loyalty, build_id)
                    )
        
        await conn.commit()


async def sync_from_api():
    """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Å tarkov.dev API."""
    try:
        print("\nüåê –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å tarkov.dev API...")
        return await load_data_from_api()
    except Exception as e:
        print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")
        print("   –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –ª–æ–∫–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏...")
        return False


async def start_bot():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
    print("\nü§ñ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    print("=" * 60)
    
    import logging
    from aiogram import Bot, Dispatcher
    from aiogram.fsm.storage.memory import MemoryStorage
    from database.config import settings
    from handlers import common, search, builds, loyalty, tier_list, settings as settings_handler, dynamic_builds, budget_constructor, quest_builds, meta_builds_handler, admin
    from services.user_service import UserService
    from services.build_service import BuildService
    from services.random_build_service import RandomBuildService
    from services.admin_service import AdminService
    from api_clients import TarkovAPIClient
    from services.weapon_service import WeaponService
    
    # Configure logging
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )
    logger = logging.getLogger(__name__)
    
    # Database already initialized
    from database import Database
    db = Database("data/eft_helper.db")
    
    # Initialize API client once (shared across all requests)
    api_client = TarkovAPIClient()
    
    # v5.1 AI Services
    print("\nü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞...")
    ai_assistant = None
    ai_generation_service = None
    context_builder = None
    news_service = None
    
    try:
        from services import AIAssistant, AIGenerationService, ContextBuilder, NewsService
        
        ollama_url = os.getenv("OLLAMA_URL", "http://localhost:11434")
        ollama_model = os.getenv("OLLAMA_MODEL", "qwen3:8b")
        
        print(f"   Ollama: {ollama_url}")
        print(f"   Model: {ollama_model}")
        logger.info(f"Initializing AI services: Ollama at {ollama_url}, model {ollama_model}")
        
        news_service = NewsService()
        print("   ‚úÖ NewsService")
        context_builder = ContextBuilder(api_client, db)
        print("   ‚úÖ ContextBuilder")
        ai_generation_service = AIGenerationService(api_client, db, ollama_url, ollama_model)
        print("   ‚úÖ AIGenerationService")
        ai_assistant = AIAssistant(api_client, db, ai_generation_service, news_service)
        print("   ‚úÖ AIAssistant")
        
        print("‚úÖ AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!\n")
        logger.info("‚úÖ AI services initialized successfully")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ AI: {e}\n")
        logger.error(f"‚ùå Failed to initialize AI services: {e}", exc_info=True)
        logger.warning("‚ö†Ô∏è  Bot will work without AI assistant")
    
    # Initialize bot and dispatcher
    bot = Bot(token=settings.BOT_TOKEN)
    storage = MemoryStorage()
    dp = Dispatcher(storage=storage)
    
    # Register routers
    dp.include_router(common.router)
    dp.include_router(search.router)
    dp.include_router(builds.router)
    dp.include_router(loyalty.router)
    dp.include_router(tier_list.router)
    dp.include_router(settings_handler.router)
    dp.include_router(dynamic_builds.router)
    dp.include_router(budget_constructor.router)
    dp.include_router(quest_builds.router)
    dp.include_router(meta_builds_handler.router)
    dp.include_router(admin.router)  # Admin panel
    
    # Middleware to inject db and services into handlers
    @dp.update.outer_middleware()
    async def db_middleware(handler, event, data):
        # Use the shared API client instead of creating a new one
        data["db"] = db
        data["user_service"] = UserService(db)
        data["build_service"] = BuildService(db, api_client)
        data["random_build_service"] = RandomBuildService(api_client)
        data["admin_service"] = AdminService(db)
        data["api_client"] = api_client
        data["weapon_service"] = WeaponService(db, api_client)
        # v5.1 AI services
        data["ai_assistant"] = ai_assistant
        data["ai_generation_service"] = ai_generation_service
        data["context_builder"] = context_builder
        data["news_service"] = news_service
        return await handler(event, data)
    
    # Global error handler
    @dp.error()
    async def error_handler(event, **kwargs):
        exception = kwargs.get('exception')
        logger.error(f"Error occurred: {exception}", exc_info=True)
        return True
    
    logger.info("Bot starting...")
    
    try:
        # Start polling
        await dp.start_polling(bot, allowed_updates=dp.resolve_used_update_types())
    finally:
        # Clean up resources
        await bot.session.close()
        await api_client.close()
        logger.info("Bot stopped")


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞."""
    print("=" * 60)
    print("  EFT Helper - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫")
    print("=" * 60)
    
    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ .env —Ñ–∞–π–ª–∞
    if not await check_env_file():
        print("\n‚ùå –ó–∞–ø—É—Å–∫ –ø—Ä–µ—Ä–≤–∞–Ω. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ .env —Ñ–∞–π–ª –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–Ω–æ–≤–∞.")
        return
    
    # 2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    db = await init_database()
    
    # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –±–∞–∑—ã
    db_content = await check_database_content(db)
    
    # 4. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –±–∞–∑–∞ –ø—É—Å—Ç–∞—è
    if db_content["modules"] < 100:
        print("\n‚ö†Ô∏è  –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞ –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –º–∞–ª–æ –¥–∞–Ω–Ω—ã—Ö!")
        print("\nüì¶ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ API...")
        
        # –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –±–∞–∑–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        await populate_sample_data()
        
        # –ó–∞—Ç–µ–º –∑–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ API
        success = await load_data_from_api()
        
        if not success:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ API")
            print("   –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ")
        else:
            print("‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–±–æ—Ä–∫–∏ —Å –Ω–æ–≤—ã–º–∏ –º–æ–¥—É–ª—è–º–∏
            print("\nüîß –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–±–æ—Ä–æ–∫ —Å –º–æ–¥—É–ª—è–º–∏...")
            await update_builds_with_modules()
    
    # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    db_content = await check_database_content(db)
    
    # 5. –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    print("\n‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã!")
    print("=" * 60)
    
    # 6. –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    await start_bot()


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\n\nüëã –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
